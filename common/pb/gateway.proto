syntax = "proto3";
package pb;
option go_package = "./pb";
import "common.proto";

//GatewayApiRequest http/私有协议 请求
message GatewayApiRequest {
  RequestHeader header = 1;
  string requestId = 2;
  string path = 3;
  bytes body = 4;
}

//GatewayApiResponse http/私有协议 响应
message GatewayApiResponse {
  ResponseHeader header = 1;
  string requestId = 2;
  string path = 3;
  bytes body = 4;
}

//WsConnection ws连接
message WsConnection {
  int64 id = 1;
  RequestHeader header = 2;
}

//GatewayGetUserConnectionReq 获取用户的连接
message GatewayGetUserConnectionReq {
  RequestHeader header = 1;
  string userId = 2;
}

message GatewayGetUserConnectionResp {
  ResponseHeader header = 1;
  repeated WsConnection connections = 2;
}

//GatewayBatchGetUserConnectionReq 批量获取用户的连接
message GatewayBatchGetUserConnectionReq {
  RequestHeader header = 1;
  repeated string userIds = 2;
}

message GatewayBatchGetUserConnectionResp {
  ResponseHeader header = 1;
  repeated WsConnection connections = 2;
}

message GatewayGetConnectionFilter {
  repeated string userIds = 1;
}

//GatewayGetConnectionByFilterReq 根据过滤条件获取连接
message GatewayGetConnectionByFilterReq {
  RequestHeader header = 1;
  GatewayGetConnectionFilter filter = 2;
}

message GatewayGetConnectionByFilterResp {
  ResponseHeader header = 1;
  repeated WsConnection connections = 2;
}

//GatewayWriteDataToWsReq 写入数据到ws连接
message GatewayWriteDataToWsReq {
  RequestHeader header = 1;
  GatewayGetConnectionFilter filter = 2;
  bytes data = 3;
}

message GatewayWriteDataToWsResp {
  ResponseHeader header = 1;
  repeated WsConnection successConnections = 2;
}

//GatewayKickWsReq 踢出ws连接
message GatewayKickWsReq {
  RequestHeader header = 1;
  GatewayGetConnectionFilter filter = 2;
  WebsocketCustomCloseCode closeCode = 3;
  string closeReason = 4;
}

message GatewayKickWsResp {
  ResponseHeader header = 1;
  repeated WsConnection successConnections = 2;
}

//GatewayKeepAliveReq 保持连接
message GatewayKeepAliveReq {
  RequestHeader header = 1;
}

message GatewayKeepAliveResp {
  ResponseHeader header = 1;
}

service gatewayService {
  // GatewayGetUserConnection 获取用户的连接
  // 二次开发人员不建议修改此处逻辑
  rpc GatewayGetUserConnection(GatewayGetUserConnectionReq) returns (GatewayGetUserConnectionResp);
  // GatewayBatchGetUserConnection 批量获取用户的连接
  // 二次开发人员建议不修改此处逻辑
  rpc GatewayBatchGetUserConnection(GatewayBatchGetUserConnectionReq) returns (GatewayBatchGetUserConnectionResp);
  // GatewayGetConnectionByFilter 通过条件获取用户的连接
  // 二次开发人员可以增加过滤条件
  rpc GatewayGetConnectionByFilter(GatewayGetConnectionByFilterReq) returns (GatewayGetConnectionByFilterResp);
  // GatewayWriteDataToWs 向用户的连接写入数据
  // 二次开发人员不建议修改此处逻辑
  rpc GatewayWriteDataToWs(GatewayWriteDataToWsReq) returns (GatewayWriteDataToWsResp);
  // GatewayKickWs 踢出用户的连接
  // 二次开发人员可以在此处修改踢出用户连接的逻辑
  // 比如踢出连接之前，先给用户发送一条消息
  rpc GatewayKickWs(GatewayKickWsReq) returns (GatewayKickWsResp);
  // KeepAlive 保持连接
  // 客户端必须每隔 config.Websocket.KeepAliveSecond 秒发送一次心跳包
  // 二次开发人员可以在这里修改逻辑，比如一致性算法安全校验等
  rpc GatewayKeepAlive(GatewayKeepAliveReq) returns (GatewayKeepAliveResp);
}
