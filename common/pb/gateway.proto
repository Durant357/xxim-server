syntax = "proto3";
package pb;
option go_package = "./pb";
import "common.proto";

//GatewayApiRequest http/私有协议 请求
message GatewayApiRequest {
  RequestHeader header = 1;
  string requestId = 2;
  string path = 3;
  bytes body = 4;
}

//GatewayApiResponse http/私有协议 响应
message GatewayApiResponse {
  ResponseHeader header = 1;
  string requestId = 2;
  string path = 3;
  bytes body = 4;
}

//WsConnection ws连接
message WsConnection {
  int64 id = 1;
  RequestHeader header = 2;
}

//GatewayGetUserConnectionReq 获取用户的连接
message GatewayGetUserConnectionReq {
  RequestHeader header = 1;
  string userId = 2;
}

message GatewayGetUserConnectionResp {
  ResponseHeader header = 1;
  repeated WsConnection connections = 2;
}

//GatewayBatchGetUserConnectionReq 批量获取用户的连接
message GatewayBatchGetUserConnectionReq {
  RequestHeader header = 1;
  repeated string userIds = 2;
}

message GatewayBatchGetUserConnectionResp {
  ResponseHeader header = 1;
  repeated WsConnection connections = 2;
}

message GatewayGetConnectionFilter {
  repeated string userIds = 1;
}

//GatewayGetConnectionByFilterReq 根据过滤条件获取连接
message GatewayGetConnectionByFilterReq {
  RequestHeader header = 1;
  GatewayGetConnectionFilter filter = 2;
}

message GatewayGetConnectionByFilterResp {
  ResponseHeader header = 1;
  repeated WsConnection connections = 2;
}

//GatewayWriteDataToWsReq 写入数据到ws连接
message GatewayWriteDataToWsReq {
  RequestHeader header = 1;
  GatewayGetConnectionFilter filter = 2;
  bytes data = 3;
}

message GatewayWriteDataToWsResp {
  ResponseHeader header = 1;
  repeated WsConnection successConnections = 2;
}

//GatewayKickWsReq 踢出ws连接
message GatewayKickWsReq {
  RequestHeader header = 1;
  GatewayGetConnectionFilter filter = 2;
  WebsocketCustomCloseCode closeCode = 3;
  string closeReason = 4;
}

message GatewayKickWsResp {
  ResponseHeader header = 1;
  repeated WsConnection successConnections = 2;
}

service gatewayService {
  rpc GatewayGetUserConnection(GatewayGetUserConnectionReq) returns (GatewayGetUserConnectionResp);
  rpc GatewayBatchGetUserConnection(GatewayBatchGetUserConnectionReq) returns (GatewayBatchGetUserConnectionResp);
  rpc GatewayGetConnectionByFilter(GatewayGetConnectionByFilterReq) returns (GatewayGetConnectionByFilterResp);
  rpc GatewayWriteDataToWs(GatewayWriteDataToWsReq) returns (GatewayWriteDataToWsResp);
  rpc GatewayKickWs(GatewayKickWsReq) returns (GatewayKickWsResp);
}
