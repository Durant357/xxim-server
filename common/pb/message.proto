syntax = "proto3";
package pb;
option go_package = "./pb";
import "common.proto";

//Message 消息
message Message {
  //MessageId 消息id 由服务端插入时生成
  string messageId = 1;
  //UUID 客户端生成的id 由客户端生成 在客户端保证唯一性
  string uuid = 2;

  //发送到哪个会话
  string conversationId = 3; // 单聊: 那么该值为接受者的id；群聊：那么该值为群id；订阅号：那么该值为订阅号id
  //会话类型
  ConversationType conversationType = 4;
  //发送者
  message Sender {
    //发送者id
    string id = 1;
    //发送者名称
    string name = 2;
    //发送者头像
    string avatar = 3;
    //extra
    string extra = 11;
  }
  Sender sender = 5; // 有可能是系统 那么该值为空

  //消息内容
  bytes content = 6;
  //消息类型
  MessageContentType contentType = 7;

  //发送时间 由客户端生成
  int64 sendTime = 8;
  //插入时间 由服务端生成
  int64 insertTime = 9;
  //在会话中的消息顺序
  int64 seq = 10;

  //选项
  message Option {
    //服务端是否保存该消息
    bool storageForServer = 1;
    //客户端是否保存该消息
    bool storageForClient = 2;
    //是否需要解密 （端对端加密技术，服务端无法解密）
    bool needDecrypt = 3;
    //消息是否需要计入未读数
    bool countUnread = 4;
  }
  Option option = 16;
  //extraMap, example: {"platformSource": "windows"}
  map<string, string> extraMap = 17;
}

//MessageSendReq 发送消息请求
message MessageSendReq {
  RequestHeader header = 1;
  //消息
  Message message = 2;
  //禁止走队列
  bool disableQueue = 3;
}

//MessageSendResp 发送消息响应
message MessageSendResp {
  ResponseHeader header = 1;
}

//MessageBatchSendReq 批量发送消息请求
message MessageBatchSendReq {
  RequestHeader header = 1;
  //消息
  repeated Message messages = 2;
  //禁止走队列
  bool disableQueue = 3;
}

//MessageBatchSendResp 批量发送消息响应
message MessageBatchSendResp {
  ResponseHeader header = 1;
}

//MessageInsertReq 插入消息请求
message MessageInsertReq {
  RequestHeader header = 1;
  //消息
  repeated Message messages = 2;
}

//MessageInsertResp 插入消息响应
message MessageInsertResp {
  ResponseHeader header = 1;
}

//MessagePushReq 推送消息请求
message MessagePushReq {
  RequestHeader header = 1;
  //消息
  repeated Message message = 2;
}

//MessagePushResp 推送消息响应
message MessagePushResp {
  ResponseHeader header = 1;
}

//MessageContentText 图文消息
message MessageContentText {
  message Item {
    enum Type {
      //文本
      TEXT = 0;
      //图片
      IMAGE = 1;
      //@
      AT = 2;
    }
    //图片
    message Image {
      //图片地址
      string url = 1;
      //宽度
      int32 width = 2;
      //高度
      int32 height = 3;
    }
    //@用户信息
    message At {
      //用户id
      string userId = 1;
      //用户名称, 渲染时先获取用户本地信息中的备注，如果没有备注，那么就显示该名称
      string name = 2;
    }
    //类型
    Type type = 1;
    //文本
    string text = 2;
    optional Image image = 3;
    optional At at = 4;
  }
  //items 图文消息
  repeated Item items = 1;
}

service messageService {
  //MessageInsert 插入消息
  //二次开发时，需要实现该接口
  rpc MessageInsert(MessageInsertReq) returns (MessageInsertResp);
  //MessageSend 发送消息
  rpc MessageSend(MessageSendReq) returns (MessageSendResp);
  //MessageBatchSend 批量发送消息
  rpc MessageBatchSend(MessageBatchSendReq) returns (MessageBatchSendResp);
  //MessagePush 推送消息
  rpc MessagePush(MessagePushReq) returns (MessagePushResp);
}

//Notice 通知
message Notice {
  //通知id 因为通知永远都是服务端发送给客户端的，所以通知id一定唯一。
  string NoticeId = 1;
  //发送到哪个会话
  string conversationId = 2; // 单聊: 那么该值为发送者和接受者的id；群聊：那么该值为群id；订阅号：那么该值为订阅号id
  //会话类型
  ConversationType conversationType = 3;
  //通知内容
  string content = 4;
  //通知类型
  NoticeContentType contentType = 5;
  //通知的更新时间
  int64 updateTime = 6;
}

//NoticeContentNewFriendRequest 通知内容-新的好友请求
message NoticeContentNewFriendRequest {}

//NoticeSend 通知发送

message NoticeSendReq {
  RequestHeader header = 1;
  Notice notice = 2;
  //追加用户
  repeated string userIds = 3;
  //是否广播
  bool broadcast = 4;
}

message NoticeSendResp {
  ResponseHeader header = 1;
}

//NoticeBatchSend 通知批量发送

message NoticeBatchSendReq {
  RequestHeader header = 1;
  repeated NoticeSendReq notices = 2;
}

message NoticeBatchSendResp {
  ResponseHeader header = 1;
}

//ListNoticeReq 获取通知列表

message ListNoticeReq {
  RequestHeader header = 1;
  //会话id
  string conversationId = 2;
  //会话类型
  ConversationType conversationType = 3;
  //UpdateTimeGt 通知更新时间大于
  int64 UpdateTimeGt = 4;
  //Limit 限制条数
  int64 Limit = 5;
}

message ListNoticeResp {
  ResponseHeader header = 1;
  repeated Notice notices = 2;
}

service noticeService {
  //NoticeSend 通知发送
  rpc NoticeSend(NoticeSendReq) returns (NoticeSendResp);
  //NoticeBatchSend 通知批量发送
  rpc NoticeBatchSend(NoticeBatchSendReq) returns (NoticeBatchSendResp);
  //ListNotice 获取通知列表
  rpc ListNotice(ListNoticeReq) returns (ListNoticeResp);
}
