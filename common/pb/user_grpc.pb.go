// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: user.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UserServiceClient is the client API for UserService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserServiceClient interface {
	//UserRegister 用户注册
	//二次开发人员可以传递自定义参数 如果不满足你的需求 你可以修改该proto文件
	UserRegister(ctx context.Context, in *UserRegisterReq, opts ...grpc.CallOption) (*UserRegisterResp, error)
	//UserDestroy 用户注销
	//注销逻辑可以从这里修改
	UserDestroy(ctx context.Context, in *UserDestroyReq, opts ...grpc.CallOption) (*UserDestroyResp, error)
	//UserAccessToken 用户登录
	//登录逻辑可以从这里修改 默认是密码/手机号登录
	UserAccessToken(ctx context.Context, in *UserAccessTokenReq, opts ...grpc.CallOption) (*UserAccessTokenResp, error)
	//RefreshUserAccessToken 刷新用户token
	//刷新逻辑可以从这里修改
	RefreshUserAccessToken(ctx context.Context, in *RefreshUserAccessTokenReq, opts ...grpc.CallOption) (*RefreshUserAccessTokenResp, error)
	//RevokeUserAccessToken 注销用户token
	//注销逻辑可以从这里修改
	RevokeUserAccessToken(ctx context.Context, in *RevokeUserAccessTokenReq, opts ...grpc.CallOption) (*RevokeUserAccessTokenResp, error)
	//UpdateUserAccountMap 更新用户账号信息
	//更新账号信息逻辑可以从这里修改 默认：如果是修改密码，需要旧密码或手机验证码。如果修改绑定手机号，需要验证新手机号的验证码
	UpdateUserAccountMap(ctx context.Context, in *UpdateUserAccountMapReq, opts ...grpc.CallOption) (*UpdateUserAccountMapResp, error)
	//UpdateUserProfileMap 更新用户个人信息
	//更新个人信息逻辑可以从这里修改
	UpdateUserProfileMap(ctx context.Context, in *UpdateUserProfileMapReq, opts ...grpc.CallOption) (*UpdateUserProfileMapResp, error)
	//UpdateUserExtraMap 更新用户扩展信息
	//更新扩展信息逻辑可以从这里修改
	UpdateUserExtraMap(ctx context.Context, in *UpdateUserExtraMapReq, opts ...grpc.CallOption) (*UpdateUserExtraMapResp, error)
	//GetSelfUserInfo 获取自己的用户信息
	//获取自己的用户信息逻辑可以从这里修改
	GetSelfUserInfo(ctx context.Context, in *GetSelfUserInfoReq, opts ...grpc.CallOption) (*GetSelfUserInfoResp, error)
	//GetUserInfo 获取用户信息
	//获取用户信息逻辑可以从这里修改
	GetUserInfo(ctx context.Context, in *GetUserInfoReq, opts ...grpc.CallOption) (*GetUserInfoResp, error)
	//ResetUserAccountMap 重置用户账号信息
	//重置账号信息逻辑可以从这里修改
	ResetUserAccountMap(ctx context.Context, in *ResetUserAccountMapReq, opts ...grpc.CallOption) (*ResetUserAccountMapResp, error)
	//UserAfterOnline 用户上线回调
	//用户上线回调逻辑可以从这里修改
	UserAfterOnline(ctx context.Context, in *UserAfterOnlineReq, opts ...grpc.CallOption) (*UserAfterOnlineResp, error)
	//UserAfterOffline 用户下线回调
	//用户下线回调逻辑可以从这里修改
	UserAfterOffline(ctx context.Context, in *UserAfterOfflineReq, opts ...grpc.CallOption) (*UserAfterOfflineResp, error)
	//UserBeforeConnect 用户连接前的回调
	//用户连接前的回调逻辑可以从这里修改
	UserBeforeConnect(ctx context.Context, in *UserBeforeConnectReq, opts ...grpc.CallOption) (*UserBeforeConnectResp, error)
	//UserBeforeRequest 用户请求前的回调
	//用户请求前的回调逻辑可以从这里修改
	UserBeforeRequest(ctx context.Context, in *UserBeforeRequestReq, opts ...grpc.CallOption) (*UserBeforeRequestResp, error)
	//CreateRobot 创建机器人
	//创建机器人逻辑可以从这里修改
	CreateRobot(ctx context.Context, in *CreateRobotReq, opts ...grpc.CallOption) (*CreateRobotResp, error)
}

type userServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserServiceClient(cc grpc.ClientConnInterface) UserServiceClient {
	return &userServiceClient{cc}
}

func (c *userServiceClient) UserRegister(ctx context.Context, in *UserRegisterReq, opts ...grpc.CallOption) (*UserRegisterResp, error) {
	out := new(UserRegisterResp)
	err := c.cc.Invoke(ctx, "/pb.userService/UserRegister", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UserDestroy(ctx context.Context, in *UserDestroyReq, opts ...grpc.CallOption) (*UserDestroyResp, error) {
	out := new(UserDestroyResp)
	err := c.cc.Invoke(ctx, "/pb.userService/UserDestroy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UserAccessToken(ctx context.Context, in *UserAccessTokenReq, opts ...grpc.CallOption) (*UserAccessTokenResp, error) {
	out := new(UserAccessTokenResp)
	err := c.cc.Invoke(ctx, "/pb.userService/UserAccessToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) RefreshUserAccessToken(ctx context.Context, in *RefreshUserAccessTokenReq, opts ...grpc.CallOption) (*RefreshUserAccessTokenResp, error) {
	out := new(RefreshUserAccessTokenResp)
	err := c.cc.Invoke(ctx, "/pb.userService/RefreshUserAccessToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) RevokeUserAccessToken(ctx context.Context, in *RevokeUserAccessTokenReq, opts ...grpc.CallOption) (*RevokeUserAccessTokenResp, error) {
	out := new(RevokeUserAccessTokenResp)
	err := c.cc.Invoke(ctx, "/pb.userService/RevokeUserAccessToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UpdateUserAccountMap(ctx context.Context, in *UpdateUserAccountMapReq, opts ...grpc.CallOption) (*UpdateUserAccountMapResp, error) {
	out := new(UpdateUserAccountMapResp)
	err := c.cc.Invoke(ctx, "/pb.userService/UpdateUserAccountMap", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UpdateUserProfileMap(ctx context.Context, in *UpdateUserProfileMapReq, opts ...grpc.CallOption) (*UpdateUserProfileMapResp, error) {
	out := new(UpdateUserProfileMapResp)
	err := c.cc.Invoke(ctx, "/pb.userService/UpdateUserProfileMap", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UpdateUserExtraMap(ctx context.Context, in *UpdateUserExtraMapReq, opts ...grpc.CallOption) (*UpdateUserExtraMapResp, error) {
	out := new(UpdateUserExtraMapResp)
	err := c.cc.Invoke(ctx, "/pb.userService/UpdateUserExtraMap", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetSelfUserInfo(ctx context.Context, in *GetSelfUserInfoReq, opts ...grpc.CallOption) (*GetSelfUserInfoResp, error) {
	out := new(GetSelfUserInfoResp)
	err := c.cc.Invoke(ctx, "/pb.userService/GetSelfUserInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetUserInfo(ctx context.Context, in *GetUserInfoReq, opts ...grpc.CallOption) (*GetUserInfoResp, error) {
	out := new(GetUserInfoResp)
	err := c.cc.Invoke(ctx, "/pb.userService/GetUserInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) ResetUserAccountMap(ctx context.Context, in *ResetUserAccountMapReq, opts ...grpc.CallOption) (*ResetUserAccountMapResp, error) {
	out := new(ResetUserAccountMapResp)
	err := c.cc.Invoke(ctx, "/pb.userService/ResetUserAccountMap", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UserAfterOnline(ctx context.Context, in *UserAfterOnlineReq, opts ...grpc.CallOption) (*UserAfterOnlineResp, error) {
	out := new(UserAfterOnlineResp)
	err := c.cc.Invoke(ctx, "/pb.userService/UserAfterOnline", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UserAfterOffline(ctx context.Context, in *UserAfterOfflineReq, opts ...grpc.CallOption) (*UserAfterOfflineResp, error) {
	out := new(UserAfterOfflineResp)
	err := c.cc.Invoke(ctx, "/pb.userService/UserAfterOffline", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UserBeforeConnect(ctx context.Context, in *UserBeforeConnectReq, opts ...grpc.CallOption) (*UserBeforeConnectResp, error) {
	out := new(UserBeforeConnectResp)
	err := c.cc.Invoke(ctx, "/pb.userService/UserBeforeConnect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UserBeforeRequest(ctx context.Context, in *UserBeforeRequestReq, opts ...grpc.CallOption) (*UserBeforeRequestResp, error) {
	out := new(UserBeforeRequestResp)
	err := c.cc.Invoke(ctx, "/pb.userService/UserBeforeRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) CreateRobot(ctx context.Context, in *CreateRobotReq, opts ...grpc.CallOption) (*CreateRobotResp, error) {
	out := new(CreateRobotResp)
	err := c.cc.Invoke(ctx, "/pb.userService/CreateRobot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserServiceServer is the server API for UserService service.
// All implementations must embed UnimplementedUserServiceServer
// for forward compatibility
type UserServiceServer interface {
	//UserRegister 用户注册
	//二次开发人员可以传递自定义参数 如果不满足你的需求 你可以修改该proto文件
	UserRegister(context.Context, *UserRegisterReq) (*UserRegisterResp, error)
	//UserDestroy 用户注销
	//注销逻辑可以从这里修改
	UserDestroy(context.Context, *UserDestroyReq) (*UserDestroyResp, error)
	//UserAccessToken 用户登录
	//登录逻辑可以从这里修改 默认是密码/手机号登录
	UserAccessToken(context.Context, *UserAccessTokenReq) (*UserAccessTokenResp, error)
	//RefreshUserAccessToken 刷新用户token
	//刷新逻辑可以从这里修改
	RefreshUserAccessToken(context.Context, *RefreshUserAccessTokenReq) (*RefreshUserAccessTokenResp, error)
	//RevokeUserAccessToken 注销用户token
	//注销逻辑可以从这里修改
	RevokeUserAccessToken(context.Context, *RevokeUserAccessTokenReq) (*RevokeUserAccessTokenResp, error)
	//UpdateUserAccountMap 更新用户账号信息
	//更新账号信息逻辑可以从这里修改 默认：如果是修改密码，需要旧密码或手机验证码。如果修改绑定手机号，需要验证新手机号的验证码
	UpdateUserAccountMap(context.Context, *UpdateUserAccountMapReq) (*UpdateUserAccountMapResp, error)
	//UpdateUserProfileMap 更新用户个人信息
	//更新个人信息逻辑可以从这里修改
	UpdateUserProfileMap(context.Context, *UpdateUserProfileMapReq) (*UpdateUserProfileMapResp, error)
	//UpdateUserExtraMap 更新用户扩展信息
	//更新扩展信息逻辑可以从这里修改
	UpdateUserExtraMap(context.Context, *UpdateUserExtraMapReq) (*UpdateUserExtraMapResp, error)
	//GetSelfUserInfo 获取自己的用户信息
	//获取自己的用户信息逻辑可以从这里修改
	GetSelfUserInfo(context.Context, *GetSelfUserInfoReq) (*GetSelfUserInfoResp, error)
	//GetUserInfo 获取用户信息
	//获取用户信息逻辑可以从这里修改
	GetUserInfo(context.Context, *GetUserInfoReq) (*GetUserInfoResp, error)
	//ResetUserAccountMap 重置用户账号信息
	//重置账号信息逻辑可以从这里修改
	ResetUserAccountMap(context.Context, *ResetUserAccountMapReq) (*ResetUserAccountMapResp, error)
	//UserAfterOnline 用户上线回调
	//用户上线回调逻辑可以从这里修改
	UserAfterOnline(context.Context, *UserAfterOnlineReq) (*UserAfterOnlineResp, error)
	//UserAfterOffline 用户下线回调
	//用户下线回调逻辑可以从这里修改
	UserAfterOffline(context.Context, *UserAfterOfflineReq) (*UserAfterOfflineResp, error)
	//UserBeforeConnect 用户连接前的回调
	//用户连接前的回调逻辑可以从这里修改
	UserBeforeConnect(context.Context, *UserBeforeConnectReq) (*UserBeforeConnectResp, error)
	//UserBeforeRequest 用户请求前的回调
	//用户请求前的回调逻辑可以从这里修改
	UserBeforeRequest(context.Context, *UserBeforeRequestReq) (*UserBeforeRequestResp, error)
	//CreateRobot 创建机器人
	//创建机器人逻辑可以从这里修改
	CreateRobot(context.Context, *CreateRobotReq) (*CreateRobotResp, error)
	mustEmbedUnimplementedUserServiceServer()
}

// UnimplementedUserServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUserServiceServer struct {
}

func (UnimplementedUserServiceServer) UserRegister(context.Context, *UserRegisterReq) (*UserRegisterResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserRegister not implemented")
}
func (UnimplementedUserServiceServer) UserDestroy(context.Context, *UserDestroyReq) (*UserDestroyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserDestroy not implemented")
}
func (UnimplementedUserServiceServer) UserAccessToken(context.Context, *UserAccessTokenReq) (*UserAccessTokenResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserAccessToken not implemented")
}
func (UnimplementedUserServiceServer) RefreshUserAccessToken(context.Context, *RefreshUserAccessTokenReq) (*RefreshUserAccessTokenResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefreshUserAccessToken not implemented")
}
func (UnimplementedUserServiceServer) RevokeUserAccessToken(context.Context, *RevokeUserAccessTokenReq) (*RevokeUserAccessTokenResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RevokeUserAccessToken not implemented")
}
func (UnimplementedUserServiceServer) UpdateUserAccountMap(context.Context, *UpdateUserAccountMapReq) (*UpdateUserAccountMapResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserAccountMap not implemented")
}
func (UnimplementedUserServiceServer) UpdateUserProfileMap(context.Context, *UpdateUserProfileMapReq) (*UpdateUserProfileMapResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserProfileMap not implemented")
}
func (UnimplementedUserServiceServer) UpdateUserExtraMap(context.Context, *UpdateUserExtraMapReq) (*UpdateUserExtraMapResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserExtraMap not implemented")
}
func (UnimplementedUserServiceServer) GetSelfUserInfo(context.Context, *GetSelfUserInfoReq) (*GetSelfUserInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSelfUserInfo not implemented")
}
func (UnimplementedUserServiceServer) GetUserInfo(context.Context, *GetUserInfoReq) (*GetUserInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserInfo not implemented")
}
func (UnimplementedUserServiceServer) ResetUserAccountMap(context.Context, *ResetUserAccountMapReq) (*ResetUserAccountMapResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetUserAccountMap not implemented")
}
func (UnimplementedUserServiceServer) UserAfterOnline(context.Context, *UserAfterOnlineReq) (*UserAfterOnlineResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserAfterOnline not implemented")
}
func (UnimplementedUserServiceServer) UserAfterOffline(context.Context, *UserAfterOfflineReq) (*UserAfterOfflineResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserAfterOffline not implemented")
}
func (UnimplementedUserServiceServer) UserBeforeConnect(context.Context, *UserBeforeConnectReq) (*UserBeforeConnectResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserBeforeConnect not implemented")
}
func (UnimplementedUserServiceServer) UserBeforeRequest(context.Context, *UserBeforeRequestReq) (*UserBeforeRequestResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserBeforeRequest not implemented")
}
func (UnimplementedUserServiceServer) CreateRobot(context.Context, *CreateRobotReq) (*CreateRobotResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRobot not implemented")
}
func (UnimplementedUserServiceServer) mustEmbedUnimplementedUserServiceServer() {}

// UnsafeUserServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserServiceServer will
// result in compilation errors.
type UnsafeUserServiceServer interface {
	mustEmbedUnimplementedUserServiceServer()
}

func RegisterUserServiceServer(s grpc.ServiceRegistrar, srv UserServiceServer) {
	s.RegisterService(&UserService_ServiceDesc, srv)
}

func _UserService_UserRegister_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRegisterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UserRegister(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.userService/UserRegister",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UserRegister(ctx, req.(*UserRegisterReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UserDestroy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserDestroyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UserDestroy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.userService/UserDestroy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UserDestroy(ctx, req.(*UserDestroyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UserAccessToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserAccessTokenReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UserAccessToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.userService/UserAccessToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UserAccessToken(ctx, req.(*UserAccessTokenReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_RefreshUserAccessToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefreshUserAccessTokenReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).RefreshUserAccessToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.userService/RefreshUserAccessToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).RefreshUserAccessToken(ctx, req.(*RefreshUserAccessTokenReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_RevokeUserAccessToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RevokeUserAccessTokenReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).RevokeUserAccessToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.userService/RevokeUserAccessToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).RevokeUserAccessToken(ctx, req.(*RevokeUserAccessTokenReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UpdateUserAccountMap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserAccountMapReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UpdateUserAccountMap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.userService/UpdateUserAccountMap",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UpdateUserAccountMap(ctx, req.(*UpdateUserAccountMapReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UpdateUserProfileMap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserProfileMapReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UpdateUserProfileMap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.userService/UpdateUserProfileMap",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UpdateUserProfileMap(ctx, req.(*UpdateUserProfileMapReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UpdateUserExtraMap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserExtraMapReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UpdateUserExtraMap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.userService/UpdateUserExtraMap",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UpdateUserExtraMap(ctx, req.(*UpdateUserExtraMapReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetSelfUserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSelfUserInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetSelfUserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.userService/GetSelfUserInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetSelfUserInfo(ctx, req.(*GetSelfUserInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetUserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetUserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.userService/GetUserInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetUserInfo(ctx, req.(*GetUserInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_ResetUserAccountMap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetUserAccountMapReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).ResetUserAccountMap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.userService/ResetUserAccountMap",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).ResetUserAccountMap(ctx, req.(*ResetUserAccountMapReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UserAfterOnline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserAfterOnlineReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UserAfterOnline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.userService/UserAfterOnline",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UserAfterOnline(ctx, req.(*UserAfterOnlineReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UserAfterOffline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserAfterOfflineReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UserAfterOffline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.userService/UserAfterOffline",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UserAfterOffline(ctx, req.(*UserAfterOfflineReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UserBeforeConnect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserBeforeConnectReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UserBeforeConnect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.userService/UserBeforeConnect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UserBeforeConnect(ctx, req.(*UserBeforeConnectReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UserBeforeRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserBeforeRequestReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UserBeforeRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.userService/UserBeforeRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UserBeforeRequest(ctx, req.(*UserBeforeRequestReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_CreateRobot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRobotReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).CreateRobot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.userService/CreateRobot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).CreateRobot(ctx, req.(*CreateRobotReq))
	}
	return interceptor(ctx, in, info, handler)
}

// UserService_ServiceDesc is the grpc.ServiceDesc for UserService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.userService",
	HandlerType: (*UserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UserRegister",
			Handler:    _UserService_UserRegister_Handler,
		},
		{
			MethodName: "UserDestroy",
			Handler:    _UserService_UserDestroy_Handler,
		},
		{
			MethodName: "UserAccessToken",
			Handler:    _UserService_UserAccessToken_Handler,
		},
		{
			MethodName: "RefreshUserAccessToken",
			Handler:    _UserService_RefreshUserAccessToken_Handler,
		},
		{
			MethodName: "RevokeUserAccessToken",
			Handler:    _UserService_RevokeUserAccessToken_Handler,
		},
		{
			MethodName: "UpdateUserAccountMap",
			Handler:    _UserService_UpdateUserAccountMap_Handler,
		},
		{
			MethodName: "UpdateUserProfileMap",
			Handler:    _UserService_UpdateUserProfileMap_Handler,
		},
		{
			MethodName: "UpdateUserExtraMap",
			Handler:    _UserService_UpdateUserExtraMap_Handler,
		},
		{
			MethodName: "GetSelfUserInfo",
			Handler:    _UserService_GetSelfUserInfo_Handler,
		},
		{
			MethodName: "GetUserInfo",
			Handler:    _UserService_GetUserInfo_Handler,
		},
		{
			MethodName: "ResetUserAccountMap",
			Handler:    _UserService_ResetUserAccountMap_Handler,
		},
		{
			MethodName: "UserAfterOnline",
			Handler:    _UserService_UserAfterOnline_Handler,
		},
		{
			MethodName: "UserAfterOffline",
			Handler:    _UserService_UserAfterOffline_Handler,
		},
		{
			MethodName: "UserBeforeConnect",
			Handler:    _UserService_UserBeforeConnect_Handler,
		},
		{
			MethodName: "UserBeforeRequest",
			Handler:    _UserService_UserBeforeRequest_Handler,
		},
		{
			MethodName: "CreateRobot",
			Handler:    _UserService_CreateRobot_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user.proto",
}
