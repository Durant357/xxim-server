// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.21.12
// source: common.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

//Platform 平台枚举
type Platform int32

const (
	Platform_IOS        Platform = 0 // ios
	Platform_ANDROID    Platform = 1 // android
	Platform_WEB        Platform = 2 // web
	Platform_WINDOWS    Platform = 3 // windows
	Platform_MAC        Platform = 4 // mac
	Platform_LINUX      Platform = 5 // linux
	Platform_Ipad       Platform = 6 // ipad
	Platform_AndroidPad Platform = 7 // android pad
)

// Enum value maps for Platform.
var (
	Platform_name = map[int32]string{
		0: "IOS",
		1: "ANDROID",
		2: "WEB",
		3: "WINDOWS",
		4: "MAC",
		5: "LINUX",
		6: "Ipad",
		7: "AndroidPad",
	}
	Platform_value = map[string]int32{
		"IOS":        0,
		"ANDROID":    1,
		"WEB":        2,
		"WINDOWS":    3,
		"MAC":        4,
		"LINUX":      5,
		"Ipad":       6,
		"AndroidPad": 7,
	}
)

func (x Platform) Enum() *Platform {
	p := new(Platform)
	*p = x
	return p
}

func (x Platform) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Platform) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[0].Descriptor()
}

func (Platform) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[0]
}

func (x Platform) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Platform.Descriptor instead.
func (Platform) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{0}
}

//I18nLanguage 语言枚举
type I18NLanguage int32

const (
	I18NLanguage_UNSET_LANGUAGE      I18NLanguage = 0  // 未设置
	I18NLanguage_Afrikaans           I18NLanguage = 1  // 南非荷兰语	af
	I18NLanguage_Albanian            I18NLanguage = 2  // 阿尔巴尼亚语	sq
	I18NLanguage_Amharic             I18NLanguage = 3  // 阿姆哈拉语	am
	I18NLanguage_Arabic              I18NLanguage = 4  // 阿拉伯语	ar
	I18NLanguage_Armenian            I18NLanguage = 5  // 亚美尼亚语	hy
	I18NLanguage_Azerbaijani         I18NLanguage = 6  // 阿塞拜疆语	az
	I18NLanguage_Bengali             I18NLanguage = 7  // 孟加拉语	bn
	I18NLanguage_Bosnian             I18NLanguage = 8  // 波斯尼亚语	bs
	I18NLanguage_Bulgarian           I18NLanguage = 9  // 保加利亚语	bg
	I18NLanguage_Catalan             I18NLanguage = 10 // 加泰罗尼亚语	ca
	I18NLanguage_Chinese_Simplified  I18NLanguage = 11 // 简体中文 	zh
	I18NLanguage_Chinese_Traditional I18NLanguage = 12 // 繁体中文 	zh-TW
	I18NLanguage_Croatian            I18NLanguage = 13 // 克罗地亚语	hr
	I18NLanguage_Czech               I18NLanguage = 14 // 捷克语	cs
	I18NLanguage_Danish              I18NLanguage = 15 // 丹麦语	da
	I18NLanguage_Dari                I18NLanguage = 16 // 波斯语	fa-AF
	I18NLanguage_Dutch               I18NLanguage = 17 // 荷兰语	nl
	I18NLanguage_English             I18NLanguage = 18 // 英语	en
	I18NLanguage_Estonian            I18NLanguage = 19 // 爱沙尼亚语	et
	I18NLanguage_Farsi_Persian       I18NLanguage = 20 // 波斯语 	fa
	I18NLanguage_Filipino_Tagalog    I18NLanguage = 21 // 菲律宾语	tl
	I18NLanguage_Finnish             I18NLanguage = 22 // 芬兰语	fi
	I18NLanguage_French              I18NLanguage = 23 // 法语	fr
	I18NLanguage_French_Canada       I18NLanguage = 24 // 法语（加拿大）	fr-CA
	I18NLanguage_Georgian            I18NLanguage = 25 // 格鲁吉亚语	ka
	I18NLanguage_German              I18NLanguage = 26 // 德语	de
	I18NLanguage_Greek               I18NLanguage = 27 // 希腊语	el
	I18NLanguage_Gujarati            I18NLanguage = 28 // 古吉拉特语	gu
	I18NLanguage_Haitian_Creole      I18NLanguage = 29 // 海地克里奥尔语 	ht
	I18NLanguage_Hausa               I18NLanguage = 30 // 豪萨语	ha
	I18NLanguage_Hebrew              I18NLanguage = 31 // 希伯来语	he
	I18NLanguage_Hindi               I18NLanguage = 32 // 印地语	hi
	I18NLanguage_Hungarian           I18NLanguage = 33 // 匈牙利语	hu
	I18NLanguage_Icelandic           I18NLanguage = 34 // 冰岛语	is
	I18NLanguage_Indonesian          I18NLanguage = 35 // 印度尼西亚语	id
	I18NLanguage_Irish               I18NLanguage = 36 // 爱尔兰语	ga
	I18NLanguage_Italian             I18NLanguage = 37 // 意大利语	it
	I18NLanguage_Japanese            I18NLanguage = 38 // 日语	ja
	I18NLanguage_Kannada             I18NLanguage = 39 // 卡纳达语	kn
	I18NLanguage_Kazakh              I18NLanguage = 40 // 哈萨克语	kk
	I18NLanguage_Korean              I18NLanguage = 41 // 韩语	ko
	I18NLanguage_Latvian             I18NLanguage = 42 // 拉脱维亚语	lv
	I18NLanguage_Lithuanian          I18NLanguage = 43 // 立陶宛语	lt
	I18NLanguage_Macedonian          I18NLanguage = 44 // 马其顿语	mk
	I18NLanguage_Malay               I18NLanguage = 45 // 马来语	ms
	I18NLanguage_Malayalam           I18NLanguage = 46 // 马拉雅拉姆语	ml
	I18NLanguage_Maltese             I18NLanguage = 47 // 马耳他语	mt
	I18NLanguage_Marathi             I18NLanguage = 48 // 马拉地语	mr
	I18NLanguage_Mongolian           I18NLanguage = 49 // 蒙古语	mn
	I18NLanguage_Norwegian_Bokmal    I18NLanguage = 50 // 挪威语 	no
	I18NLanguage_Pashto              I18NLanguage = 51 // 普什图语	ps
	I18NLanguage_Polish              I18NLanguage = 52 // 波兰语	pl
	I18NLanguage_Portuguese_Brazil   I18NLanguage = 53 // 葡萄牙语（巴西）	pt
	I18NLanguage_Portuguese_Portugal I18NLanguage = 54 // 葡萄牙语（葡萄牙）	pt-PT
	I18NLanguage_Punjabi             I18NLanguage = 55 // 旁遮普语	pa
	I18NLanguage_Romanian            I18NLanguage = 56 // 罗马尼亚语	ro
	I18NLanguage_Russian             I18NLanguage = 57 // 俄语	ru
	I18NLanguage_Serbian             I18NLanguage = 58 // 塞尔维亚语	sr
	I18NLanguage_Sinhala             I18NLanguage = 59 // 僧伽罗语	si
	I18NLanguage_Slovak              I18NLanguage = 60 // 斯洛伐克语	sk
	I18NLanguage_Slovenian           I18NLanguage = 61 // 斯洛文尼亚语	sl
	I18NLanguage_Somali              I18NLanguage = 62 // 索马里语	so
	I18NLanguage_Spanish             I18NLanguage = 63 // 西班牙语	es
	I18NLanguage_Spanish_Mexico      I18NLanguage = 64 // 西班牙语（墨西哥）	es-MX
	I18NLanguage_Swahili             I18NLanguage = 65 // 斯瓦希里语	sw
	I18NLanguage_Swedish             I18NLanguage = 66 // 瑞典语	sv
	I18NLanguage_Tamil               I18NLanguage = 67 // 泰米尔语	ta
	I18NLanguage_Telugu              I18NLanguage = 68 // 泰卢固语	te
	I18NLanguage_Thai                I18NLanguage = 69 // 泰语	th
	I18NLanguage_Turkish             I18NLanguage = 70 // 土耳其语	tr
	I18NLanguage_Ukrainian           I18NLanguage = 71 // 乌克兰语	uk
	I18NLanguage_Urdu                I18NLanguage = 72 // 乌尔都语	ur
	I18NLanguage_Uzbek               I18NLanguage = 73 // 乌兹别克语	uz
	I18NLanguage_Vietnamese          I18NLanguage = 74 // 越南语	vi
	I18NLanguage_Welsh               I18NLanguage = 75 // 威尔士语	cy
)

// Enum value maps for I18NLanguage.
var (
	I18NLanguage_name = map[int32]string{
		0:  "UNSET_LANGUAGE",
		1:  "Afrikaans",
		2:  "Albanian",
		3:  "Amharic",
		4:  "Arabic",
		5:  "Armenian",
		6:  "Azerbaijani",
		7:  "Bengali",
		8:  "Bosnian",
		9:  "Bulgarian",
		10: "Catalan",
		11: "Chinese_Simplified",
		12: "Chinese_Traditional",
		13: "Croatian",
		14: "Czech",
		15: "Danish",
		16: "Dari",
		17: "Dutch",
		18: "English",
		19: "Estonian",
		20: "Farsi_Persian",
		21: "Filipino_Tagalog",
		22: "Finnish",
		23: "French",
		24: "French_Canada",
		25: "Georgian",
		26: "German",
		27: "Greek",
		28: "Gujarati",
		29: "Haitian_Creole",
		30: "Hausa",
		31: "Hebrew",
		32: "Hindi",
		33: "Hungarian",
		34: "Icelandic",
		35: "Indonesian",
		36: "Irish",
		37: "Italian",
		38: "Japanese",
		39: "Kannada",
		40: "Kazakh",
		41: "Korean",
		42: "Latvian",
		43: "Lithuanian",
		44: "Macedonian",
		45: "Malay",
		46: "Malayalam",
		47: "Maltese",
		48: "Marathi",
		49: "Mongolian",
		50: "Norwegian_Bokmal",
		51: "Pashto",
		52: "Polish",
		53: "Portuguese_Brazil",
		54: "Portuguese_Portugal",
		55: "Punjabi",
		56: "Romanian",
		57: "Russian",
		58: "Serbian",
		59: "Sinhala",
		60: "Slovak",
		61: "Slovenian",
		62: "Somali",
		63: "Spanish",
		64: "Spanish_Mexico",
		65: "Swahili",
		66: "Swedish",
		67: "Tamil",
		68: "Telugu",
		69: "Thai",
		70: "Turkish",
		71: "Ukrainian",
		72: "Urdu",
		73: "Uzbek",
		74: "Vietnamese",
		75: "Welsh",
	}
	I18NLanguage_value = map[string]int32{
		"UNSET_LANGUAGE":      0,
		"Afrikaans":           1,
		"Albanian":            2,
		"Amharic":             3,
		"Arabic":              4,
		"Armenian":            5,
		"Azerbaijani":         6,
		"Bengali":             7,
		"Bosnian":             8,
		"Bulgarian":           9,
		"Catalan":             10,
		"Chinese_Simplified":  11,
		"Chinese_Traditional": 12,
		"Croatian":            13,
		"Czech":               14,
		"Danish":              15,
		"Dari":                16,
		"Dutch":               17,
		"English":             18,
		"Estonian":            19,
		"Farsi_Persian":       20,
		"Filipino_Tagalog":    21,
		"Finnish":             22,
		"French":              23,
		"French_Canada":       24,
		"Georgian":            25,
		"German":              26,
		"Greek":               27,
		"Gujarati":            28,
		"Haitian_Creole":      29,
		"Hausa":               30,
		"Hebrew":              31,
		"Hindi":               32,
		"Hungarian":           33,
		"Icelandic":           34,
		"Indonesian":          35,
		"Irish":               36,
		"Italian":             37,
		"Japanese":            38,
		"Kannada":             39,
		"Kazakh":              40,
		"Korean":              41,
		"Latvian":             42,
		"Lithuanian":          43,
		"Macedonian":          44,
		"Malay":               45,
		"Malayalam":           46,
		"Maltese":             47,
		"Marathi":             48,
		"Mongolian":           49,
		"Norwegian_Bokmal":    50,
		"Pashto":              51,
		"Polish":              52,
		"Portuguese_Brazil":   53,
		"Portuguese_Portugal": 54,
		"Punjabi":             55,
		"Romanian":            56,
		"Russian":             57,
		"Serbian":             58,
		"Sinhala":             59,
		"Slovak":              60,
		"Slovenian":           61,
		"Somali":              62,
		"Spanish":             63,
		"Spanish_Mexico":      64,
		"Swahili":             65,
		"Swedish":             66,
		"Tamil":               67,
		"Telugu":              68,
		"Thai":                69,
		"Turkish":             70,
		"Ukrainian":           71,
		"Urdu":                72,
		"Uzbek":               73,
		"Vietnamese":          74,
		"Welsh":               75,
	}
)

func (x I18NLanguage) Enum() *I18NLanguage {
	p := new(I18NLanguage)
	*p = x
	return p
}

func (x I18NLanguage) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (I18NLanguage) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[1].Descriptor()
}

func (I18NLanguage) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[1]
}

func (x I18NLanguage) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use I18NLanguage.Descriptor instead.
func (I18NLanguage) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{1}
}

//EncodingProto 编码协议枚举
type EncodingProto int32

const (
	EncodingProto_PROTOBUF EncodingProto = 0 // protobuf
	EncodingProto_JSON     EncodingProto = 1 // json
)

// Enum value maps for EncodingProto.
var (
	EncodingProto_name = map[int32]string{
		0: "PROTOBUF",
		1: "JSON",
	}
	EncodingProto_value = map[string]int32{
		"PROTOBUF": 0,
		"JSON":     1,
	}
)

func (x EncodingProto) Enum() *EncodingProto {
	p := new(EncodingProto)
	*p = x
	return p
}

func (x EncodingProto) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EncodingProto) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[2].Descriptor()
}

func (EncodingProto) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[2]
}

func (x EncodingProto) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EncodingProto.Descriptor instead.
func (EncodingProto) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{2}
}

//ResponseCode
type ResponseCode int32

const (
	ResponseCode_SUCCESS        ResponseCode = 0 // 成功
	ResponseCode_INVALID_DATA   ResponseCode = 1 // 无效的数据
	ResponseCode_UNAUTHORIZED   ResponseCode = 2 // 未授权
	ResponseCode_FORBIDDEN      ResponseCode = 3 // 禁止访问
	ResponseCode_INVALID_METHOD ResponseCode = 4 // 无效的方法
	ResponseCode_TIMEOUT        ResponseCode = 5 // 超时
	ResponseCode_SERVER_ERROR   ResponseCode = 6 // 服务器错误
)

// Enum value maps for ResponseCode.
var (
	ResponseCode_name = map[int32]string{
		0: "SUCCESS",
		1: "INVALID_DATA",
		2: "UNAUTHORIZED",
		3: "FORBIDDEN",
		4: "INVALID_METHOD",
		5: "TIMEOUT",
		6: "SERVER_ERROR",
	}
	ResponseCode_value = map[string]int32{
		"SUCCESS":        0,
		"INVALID_DATA":   1,
		"UNAUTHORIZED":   2,
		"FORBIDDEN":      3,
		"INVALID_METHOD": 4,
		"TIMEOUT":        5,
		"SERVER_ERROR":   6,
	}
)

func (x ResponseCode) Enum() *ResponseCode {
	p := new(ResponseCode)
	*p = x
	return p
}

func (x ResponseCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ResponseCode) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[3].Descriptor()
}

func (ResponseCode) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[3]
}

func (x ResponseCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ResponseCode.Descriptor instead.
func (ResponseCode) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{3}
}

//ResponseActionType 客户端收到响应后做的动作类型
type ResponseActionType int32

const (
	ResponseActionType_NONE_ACTION        ResponseActionType = 0 // 无动作
	ResponseActionType_TOAST_ACTION       ResponseActionType = 1 // toast提示
	ResponseActionType_ALERT_ACTION       ResponseActionType = 2 // alert提示
	ResponseActionType_SECOND_AUTH_ACTION ResponseActionType = 3 // 二次认证 一段时间内没有进行二次验证 而且此次是高危操作 此时客户端应该弹出二次验证界面 验证短信验证码
)

// Enum value maps for ResponseActionType.
var (
	ResponseActionType_name = map[int32]string{
		0: "NONE_ACTION",
		1: "TOAST_ACTION",
		2: "ALERT_ACTION",
		3: "SECOND_AUTH_ACTION",
	}
	ResponseActionType_value = map[string]int32{
		"NONE_ACTION":        0,
		"TOAST_ACTION":       1,
		"ALERT_ACTION":       2,
		"SECOND_AUTH_ACTION": 3,
	}
)

func (x ResponseActionType) Enum() *ResponseActionType {
	p := new(ResponseActionType)
	*p = x
	return p
}

func (x ResponseActionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ResponseActionType) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[4].Descriptor()
}

func (ResponseActionType) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[4]
}

func (x ResponseActionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ResponseActionType.Descriptor instead.
func (ResponseActionType) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{4}
}

//WebsocketCustomCloseCode websocket关闭码
//You can define custom codes in the 3000-4999 range.
//The 3000-3999 range is reserved for use by libraries, frameworks and applications.
//The 4000-4999 range is reserved for private use.
type WebsocketCustomCloseCode int32

const (
	WebsocketCustomCloseCode_CloseCodeZero                 WebsocketCustomCloseCode = 0    // pb必须有一个默认值
	WebsocketCustomCloseCode_CloseCodeAuthenticationFailed WebsocketCustomCloseCode = 4001 // 认证失败
	WebsocketCustomCloseCode_CloseCodeDuplicateConnection  WebsocketCustomCloseCode = 4002 // 重复连接
	WebsocketCustomCloseCode_CloseCodeServerInternalError  WebsocketCustomCloseCode = 4003 // 服务器内部错误
	WebsocketCustomCloseCode_CloseCodeHeartbeatTimeout     WebsocketCustomCloseCode = 4004 // 心跳超时
)

// Enum value maps for WebsocketCustomCloseCode.
var (
	WebsocketCustomCloseCode_name = map[int32]string{
		0:    "CloseCodeZero",
		4001: "CloseCodeAuthenticationFailed",
		4002: "CloseCodeDuplicateConnection",
		4003: "CloseCodeServerInternalError",
		4004: "CloseCodeHeartbeatTimeout",
	}
	WebsocketCustomCloseCode_value = map[string]int32{
		"CloseCodeZero":                 0,
		"CloseCodeAuthenticationFailed": 4001,
		"CloseCodeDuplicateConnection":  4002,
		"CloseCodeServerInternalError":  4003,
		"CloseCodeHeartbeatTimeout":     4004,
	}
)

func (x WebsocketCustomCloseCode) Enum() *WebsocketCustomCloseCode {
	p := new(WebsocketCustomCloseCode)
	*p = x
	return p
}

func (x WebsocketCustomCloseCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WebsocketCustomCloseCode) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[5].Descriptor()
}

func (WebsocketCustomCloseCode) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[5]
}

func (x WebsocketCustomCloseCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WebsocketCustomCloseCode.Descriptor instead.
func (WebsocketCustomCloseCode) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{5}
}

//ConversationType 会话类型
type ConversationType int32

const (
	// 单聊
	ConversationType_Single ConversationType = 0
	// 群聊
	ConversationType_Group ConversationType = 1
	// 订阅号
	ConversationType_Subscription ConversationType = 2
)

// Enum value maps for ConversationType.
var (
	ConversationType_name = map[int32]string{
		0: "Single",
		1: "Group",
		2: "Subscription",
	}
	ConversationType_value = map[string]int32{
		"Single":       0,
		"Group":        1,
		"Subscription": 2,
	}
)

func (x ConversationType) Enum() *ConversationType {
	p := new(ConversationType)
	*p = x
	return p
}

func (x ConversationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConversationType) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[6].Descriptor()
}

func (ConversationType) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[6]
}

func (x ConversationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConversationType.Descriptor instead.
func (ConversationType) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{6}
}

//NoticeContentType 通知内容类型
type NoticeContentType int32

const (
	// 有新的好友请求
	NoticeContentType_NewFriendRequest NoticeContentType = 0
	// 创建了新群
	NoticeContentType_NewGroup NoticeContentType = 1
)

// Enum value maps for NoticeContentType.
var (
	NoticeContentType_name = map[int32]string{
		0: "NewFriendRequest",
		1: "NewGroup",
	}
	NoticeContentType_value = map[string]int32{
		"NewFriendRequest": 0,
		"NewGroup":         1,
	}
)

func (x NoticeContentType) Enum() *NoticeContentType {
	p := new(NoticeContentType)
	*p = x
	return p
}

func (x NoticeContentType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NoticeContentType) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[7].Descriptor()
}

func (NoticeContentType) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[7]
}

func (x NoticeContentType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NoticeContentType.Descriptor instead.
func (NoticeContentType) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{7}
}

//MessageContentType 消息内容类型
type MessageContentType int32

const (
	// 图文
	MessageContentType_Text MessageContentType = 0
	// Markdown
	MessageContentType_Markdown MessageContentType = 1
	// 图片
	MessageContentType_Image MessageContentType = 2
	// 语音
	MessageContentType_Voice MessageContentType = 3
	// 视频
	MessageContentType_Video MessageContentType = 4
	// 正在输入
	MessageContentType_Typing MessageContentType = 101
	// 已读
	MessageContentType_Read MessageContentType = 102
	// 撤回
	MessageContentType_Recall MessageContentType = 103
)

// Enum value maps for MessageContentType.
var (
	MessageContentType_name = map[int32]string{
		0:   "Text",
		1:   "Markdown",
		2:   "Image",
		3:   "Voice",
		4:   "Video",
		101: "Typing",
		102: "Read",
		103: "Recall",
	}
	MessageContentType_value = map[string]int32{
		"Text":     0,
		"Markdown": 1,
		"Image":    2,
		"Voice":    3,
		"Video":    4,
		"Typing":   101,
		"Read":     102,
		"Recall":   103,
	}
)

func (x MessageContentType) Enum() *MessageContentType {
	p := new(MessageContentType)
	*p = x
	return p
}

func (x MessageContentType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MessageContentType) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[8].Descriptor()
}

func (MessageContentType) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[8]
}

func (x MessageContentType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MessageContentType.Descriptor instead.
func (MessageContentType) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{8}
}

type ToastActionData_Level int32

const (
	ToastActionData_INFO  ToastActionData_Level = 0 // 信息
	ToastActionData_WARN  ToastActionData_Level = 1 // 警告
	ToastActionData_ERROR ToastActionData_Level = 2 // 错误
)

// Enum value maps for ToastActionData_Level.
var (
	ToastActionData_Level_name = map[int32]string{
		0: "INFO",
		1: "WARN",
		2: "ERROR",
	}
	ToastActionData_Level_value = map[string]int32{
		"INFO":  0,
		"WARN":  1,
		"ERROR": 2,
	}
)

func (x ToastActionData_Level) Enum() *ToastActionData_Level {
	p := new(ToastActionData_Level)
	*p = x
	return p
}

func (x ToastActionData_Level) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ToastActionData_Level) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[9].Descriptor()
}

func (ToastActionData_Level) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[9]
}

func (x ToastActionData_Level) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ToastActionData_Level.Descriptor instead.
func (ToastActionData_Level) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{1, 0}
}

type AlertActionData_ButtonType int32

const (
	AlertActionData_NO_BUTTON AlertActionData_ButtonType = 0 // 无按钮
	AlertActionData_JUMP_URL  AlertActionData_ButtonType = 1 // 跳转url
)

// Enum value maps for AlertActionData_ButtonType.
var (
	AlertActionData_ButtonType_name = map[int32]string{
		0: "NO_BUTTON",
		1: "JUMP_URL",
	}
	AlertActionData_ButtonType_value = map[string]int32{
		"NO_BUTTON": 0,
		"JUMP_URL":  1,
	}
)

func (x AlertActionData_ButtonType) Enum() *AlertActionData_ButtonType {
	p := new(AlertActionData_ButtonType)
	*p = x
	return p
}

func (x AlertActionData_ButtonType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AlertActionData_ButtonType) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[10].Descriptor()
}

func (AlertActionData_ButtonType) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[10]
}

func (x AlertActionData_ButtonType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AlertActionData_ButtonType.Descriptor instead.
func (AlertActionData_ButtonType) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{2, 0}
}

//RequestHeader 请求头
type RequestHeader struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId        string        `protobuf:"bytes,1,opt,name=appId,proto3" json:"appId"`                               // 应用id
	UserId       string        `protobuf:"bytes,2,opt,name=userId,proto3" json:"userId"`                             // 用户id
	UserToken    string        `protobuf:"bytes,3,opt,name=userToken,proto3" json:"userToken"`                       // token
	ClientIp     string        `protobuf:"bytes,4,opt,name=clientIp,proto3" json:"clientIp"`                         // 客户端ip
	InstallId    string        `protobuf:"bytes,5,opt,name=installId,proto3" json:"installId"`                       // 安装后向服务器注册的UUID
	Platform     Platform      `protobuf:"varint,6,opt,name=platform,proto3,enum=pb.Platform" json:"platform"`       // 平台
	GatewayPodIp string        `protobuf:"bytes,7,opt,name=gatewayPodIp,proto3" json:"gatewayPodIp"`                 // 网关pod的ip
	DeviceModel  string        `protobuf:"bytes,8,opt,name=deviceModel,proto3" json:"deviceModel"`                   // 设备型号
	OsVersion    string        `protobuf:"bytes,9,opt,name=osVersion,proto3" json:"osVersion"`                       // 操作系统版本
	AppVersion   string        `protobuf:"bytes,10,opt,name=appVersion,proto3" json:"appVersion"`                    // app版本
	Language     I18NLanguage  `protobuf:"varint,11,opt,name=language,proto3,enum=pb.I18NLanguage" json:"language"`  // 语言
	ConnectTime  int64         `protobuf:"varint,12,opt,name=connectTime,proto3" json:"connectTime"`                 // 连接时间 13位时间戳
	Encoding     EncodingProto `protobuf:"varint,13,opt,name=encoding,proto3,enum=pb.EncodingProto" json:"encoding"` // 编码
	Extra        string        `protobuf:"bytes,14,opt,name=extra,proto3" json:"extra"`                              // 额外信息
}

func (x *RequestHeader) Reset() {
	*x = RequestHeader{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestHeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestHeader) ProtoMessage() {}

func (x *RequestHeader) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestHeader.ProtoReflect.Descriptor instead.
func (*RequestHeader) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{0}
}

func (x *RequestHeader) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

func (x *RequestHeader) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *RequestHeader) GetUserToken() string {
	if x != nil {
		return x.UserToken
	}
	return ""
}

func (x *RequestHeader) GetClientIp() string {
	if x != nil {
		return x.ClientIp
	}
	return ""
}

func (x *RequestHeader) GetInstallId() string {
	if x != nil {
		return x.InstallId
	}
	return ""
}

func (x *RequestHeader) GetPlatform() Platform {
	if x != nil {
		return x.Platform
	}
	return Platform_IOS
}

func (x *RequestHeader) GetGatewayPodIp() string {
	if x != nil {
		return x.GatewayPodIp
	}
	return ""
}

func (x *RequestHeader) GetDeviceModel() string {
	if x != nil {
		return x.DeviceModel
	}
	return ""
}

func (x *RequestHeader) GetOsVersion() string {
	if x != nil {
		return x.OsVersion
	}
	return ""
}

func (x *RequestHeader) GetAppVersion() string {
	if x != nil {
		return x.AppVersion
	}
	return ""
}

func (x *RequestHeader) GetLanguage() I18NLanguage {
	if x != nil {
		return x.Language
	}
	return I18NLanguage_UNSET_LANGUAGE
}

func (x *RequestHeader) GetConnectTime() int64 {
	if x != nil {
		return x.ConnectTime
	}
	return 0
}

func (x *RequestHeader) GetEncoding() EncodingProto {
	if x != nil {
		return x.Encoding
	}
	return EncodingProto_PROTOBUF
}

func (x *RequestHeader) GetExtra() string {
	if x != nil {
		return x.Extra
	}
	return ""
}

//ToastActionData toast提示 客户端根据level显示不同的颜色 可能持续不同的时间
type ToastActionData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Level   ToastActionData_Level `protobuf:"varint,1,opt,name=level,proto3,enum=pb.ToastActionData_Level" json:"level"` // 级别
	Message string                `protobuf:"bytes,2,opt,name=message,proto3" json:"message"`                            // 消息
}

func (x *ToastActionData) Reset() {
	*x = ToastActionData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ToastActionData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ToastActionData) ProtoMessage() {}

func (x *ToastActionData) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ToastActionData.ProtoReflect.Descriptor instead.
func (*ToastActionData) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{1}
}

func (x *ToastActionData) GetLevel() ToastActionData_Level {
	if x != nil {
		return x.Level
	}
	return ToastActionData_INFO
}

func (x *ToastActionData) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

//AlertActionData alert提示 永远有一个关闭按钮 以下描述的是另一个操作按钮
type AlertActionData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title       string                     `protobuf:"bytes,1,opt,name=title,proto3" json:"title"`                                               // 标题
	Message     string                     `protobuf:"bytes,2,opt,name=message,proto3" json:"message"`                                           // 消息
	ButtonType  AlertActionData_ButtonType `protobuf:"varint,3,opt,name=buttonType,proto3,enum=pb.AlertActionData_ButtonType" json:"buttonType"` // 按钮类型
	ButtonLabel string                     `protobuf:"bytes,4,opt,name=buttonLabel,proto3" json:"buttonLabel"`                                   // 按钮标签
	ButtonData  string                     `protobuf:"bytes,5,opt,name=buttonData,proto3" json:"buttonData"`                                     // 按钮数据
}

func (x *AlertActionData) Reset() {
	*x = AlertActionData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AlertActionData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlertActionData) ProtoMessage() {}

func (x *AlertActionData) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlertActionData.ProtoReflect.Descriptor instead.
func (*AlertActionData) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{2}
}

func (x *AlertActionData) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *AlertActionData) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *AlertActionData) GetButtonType() AlertActionData_ButtonType {
	if x != nil {
		return x.ButtonType
	}
	return AlertActionData_NO_BUTTON
}

func (x *AlertActionData) GetButtonLabel() string {
	if x != nil {
		return x.ButtonLabel
	}
	return ""
}

func (x *AlertActionData) GetButtonData() string {
	if x != nil {
		return x.ButtonData
	}
	return ""
}

//ResponseHeader 响应头
type ResponseHeader struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code       ResponseCode       `protobuf:"varint,1,opt,name=code,proto3,enum=pb.ResponseCode" json:"code"`                   // 错误码
	ActionType ResponseActionType `protobuf:"varint,2,opt,name=actionType,proto3,enum=pb.ResponseActionType" json:"actionType"` // 动作类型
	ActionData string             `protobuf:"bytes,3,opt,name=actionData,proto3" json:"actionData"`                             // 动作数据 json字符串
	Extra      string             `protobuf:"bytes,4,opt,name=extra,proto3" json:"extra"`                                       // 额外信息
}

func (x *ResponseHeader) Reset() {
	*x = ResponseHeader{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseHeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseHeader) ProtoMessage() {}

func (x *ResponseHeader) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseHeader.ProtoReflect.Descriptor instead.
func (*ResponseHeader) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{3}
}

func (x *ResponseHeader) GetCode() ResponseCode {
	if x != nil {
		return x.Code
	}
	return ResponseCode_SUCCESS
}

func (x *ResponseHeader) GetActionType() ResponseActionType {
	if x != nil {
		return x.ActionType
	}
	return ResponseActionType_NONE_ACTION
}

func (x *ResponseHeader) GetActionData() string {
	if x != nil {
		return x.ActionData
	}
	return ""
}

func (x *ResponseHeader) GetExtra() string {
	if x != nil {
		return x.Extra
	}
	return ""
}

var File_common_proto protoreflect.FileDescriptor

var file_common_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x02,
	0x70, 0x62, 0x22, 0xd8, 0x03, 0x0a, 0x0d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x70, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x70, 0x12, 0x1c, 0x0a, 0x09,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x08, 0x70, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x70,
	0x62, 0x2e, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x12, 0x22, 0x0a, 0x0c, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x50,
	0x6f, 0x64, 0x49, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x67, 0x61, 0x74, 0x65,
	0x77, 0x61, 0x79, 0x50, 0x6f, 0x64, 0x49, 0x70, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x6f, 0x73,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6f,
	0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x70, 0x70, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x70,
	0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67,
	0x75, 0x61, 0x67, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x70, 0x62, 0x2e,
	0x49, 0x31, 0x38, 0x6e, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x52, 0x08, 0x6c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x08, 0x65, 0x6e, 0x63, 0x6f,
	0x64, 0x69, 0x6e, 0x67, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x70, 0x62, 0x2e,
	0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x08, 0x65,
	0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x22, 0x84, 0x01,
	0x0a, 0x0f, 0x54, 0x6f, 0x61, 0x73, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x2f, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x19, 0x2e, 0x70, 0x62, 0x2e, 0x54, 0x6f, 0x61, 0x73, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x05, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x26, 0x0a, 0x05,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x08, 0x0a, 0x04, 0x49, 0x4e, 0x46, 0x4f, 0x10, 0x00, 0x12,
	0x08, 0x0a, 0x04, 0x57, 0x41, 0x52, 0x4e, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x52, 0x52,
	0x4f, 0x52, 0x10, 0x02, 0x22, 0xee, 0x01, 0x0a, 0x0f, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x3e, 0x0a, 0x0a, 0x62, 0x75, 0x74, 0x74,
	0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x70,
	0x62, 0x2e, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74,
	0x61, 0x2e, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x62, 0x75,
	0x74, 0x74, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x62, 0x75, 0x74, 0x74,
	0x6f, 0x6e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x62,
	0x75, 0x74, 0x74, 0x6f, 0x6e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x62, 0x75,
	0x74, 0x74, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x22, 0x29, 0x0a, 0x0a, 0x42, 0x75,
	0x74, 0x74, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0d, 0x0a, 0x09, 0x4e, 0x4f, 0x5f, 0x42,
	0x55, 0x54, 0x54, 0x4f, 0x4e, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x4a, 0x55, 0x4d, 0x50, 0x5f,
	0x55, 0x52, 0x4c, 0x10, 0x01, 0x22, 0xa4, 0x01, 0x0a, 0x0e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x36,
	0x0a, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x16, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x44, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x2a, 0x64, 0x0a, 0x08,
	0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x07, 0x0a, 0x03, 0x49, 0x4f, 0x53, 0x10,
	0x00, 0x12, 0x0b, 0x0a, 0x07, 0x41, 0x4e, 0x44, 0x52, 0x4f, 0x49, 0x44, 0x10, 0x01, 0x12, 0x07,
	0x0a, 0x03, 0x57, 0x45, 0x42, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x57, 0x49, 0x4e, 0x44, 0x4f,
	0x57, 0x53, 0x10, 0x03, 0x12, 0x07, 0x0a, 0x03, 0x4d, 0x41, 0x43, 0x10, 0x04, 0x12, 0x09, 0x0a,
	0x05, 0x4c, 0x49, 0x4e, 0x55, 0x58, 0x10, 0x05, 0x12, 0x08, 0x0a, 0x04, 0x49, 0x70, 0x61, 0x64,
	0x10, 0x06, 0x12, 0x0e, 0x0a, 0x0a, 0x41, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x50, 0x61, 0x64,
	0x10, 0x07, 0x2a, 0xc9, 0x08, 0x0a, 0x0c, 0x49, 0x31, 0x38, 0x6e, 0x4c, 0x61, 0x6e, 0x67, 0x75,
	0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x0e, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x5f, 0x4c, 0x41, 0x4e,
	0x47, 0x55, 0x41, 0x47, 0x45, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x41, 0x66, 0x72, 0x69, 0x6b,
	0x61, 0x61, 0x6e, 0x73, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x6c, 0x62, 0x61, 0x6e, 0x69,
	0x61, 0x6e, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x41, 0x6d, 0x68, 0x61, 0x72, 0x69, 0x63, 0x10,
	0x03, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x72, 0x61, 0x62, 0x69, 0x63, 0x10, 0x04, 0x12, 0x0c, 0x0a,
	0x08, 0x41, 0x72, 0x6d, 0x65, 0x6e, 0x69, 0x61, 0x6e, 0x10, 0x05, 0x12, 0x0f, 0x0a, 0x0b, 0x41,
	0x7a, 0x65, 0x72, 0x62, 0x61, 0x69, 0x6a, 0x61, 0x6e, 0x69, 0x10, 0x06, 0x12, 0x0b, 0x0a, 0x07,
	0x42, 0x65, 0x6e, 0x67, 0x61, 0x6c, 0x69, 0x10, 0x07, 0x12, 0x0b, 0x0a, 0x07, 0x42, 0x6f, 0x73,
	0x6e, 0x69, 0x61, 0x6e, 0x10, 0x08, 0x12, 0x0d, 0x0a, 0x09, 0x42, 0x75, 0x6c, 0x67, 0x61, 0x72,
	0x69, 0x61, 0x6e, 0x10, 0x09, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x61, 0x6e,
	0x10, 0x0a, 0x12, 0x16, 0x0a, 0x12, 0x43, 0x68, 0x69, 0x6e, 0x65, 0x73, 0x65, 0x5f, 0x53, 0x69,
	0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x64, 0x10, 0x0b, 0x12, 0x17, 0x0a, 0x13, 0x43, 0x68,
	0x69, 0x6e, 0x65, 0x73, 0x65, 0x5f, 0x54, 0x72, 0x61, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x10, 0x0c, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x72, 0x6f, 0x61, 0x74, 0x69, 0x61, 0x6e, 0x10,
	0x0d, 0x12, 0x09, 0x0a, 0x05, 0x43, 0x7a, 0x65, 0x63, 0x68, 0x10, 0x0e, 0x12, 0x0a, 0x0a, 0x06,
	0x44, 0x61, 0x6e, 0x69, 0x73, 0x68, 0x10, 0x0f, 0x12, 0x08, 0x0a, 0x04, 0x44, 0x61, 0x72, 0x69,
	0x10, 0x10, 0x12, 0x09, 0x0a, 0x05, 0x44, 0x75, 0x74, 0x63, 0x68, 0x10, 0x11, 0x12, 0x0b, 0x0a,
	0x07, 0x45, 0x6e, 0x67, 0x6c, 0x69, 0x73, 0x68, 0x10, 0x12, 0x12, 0x0c, 0x0a, 0x08, 0x45, 0x73,
	0x74, 0x6f, 0x6e, 0x69, 0x61, 0x6e, 0x10, 0x13, 0x12, 0x11, 0x0a, 0x0d, 0x46, 0x61, 0x72, 0x73,
	0x69, 0x5f, 0x50, 0x65, 0x72, 0x73, 0x69, 0x61, 0x6e, 0x10, 0x14, 0x12, 0x14, 0x0a, 0x10, 0x46,
	0x69, 0x6c, 0x69, 0x70, 0x69, 0x6e, 0x6f, 0x5f, 0x54, 0x61, 0x67, 0x61, 0x6c, 0x6f, 0x67, 0x10,
	0x15, 0x12, 0x0b, 0x0a, 0x07, 0x46, 0x69, 0x6e, 0x6e, 0x69, 0x73, 0x68, 0x10, 0x16, 0x12, 0x0a,
	0x0a, 0x06, 0x46, 0x72, 0x65, 0x6e, 0x63, 0x68, 0x10, 0x17, 0x12, 0x11, 0x0a, 0x0d, 0x46, 0x72,
	0x65, 0x6e, 0x63, 0x68, 0x5f, 0x43, 0x61, 0x6e, 0x61, 0x64, 0x61, 0x10, 0x18, 0x12, 0x0c, 0x0a,
	0x08, 0x47, 0x65, 0x6f, 0x72, 0x67, 0x69, 0x61, 0x6e, 0x10, 0x19, 0x12, 0x0a, 0x0a, 0x06, 0x47,
	0x65, 0x72, 0x6d, 0x61, 0x6e, 0x10, 0x1a, 0x12, 0x09, 0x0a, 0x05, 0x47, 0x72, 0x65, 0x65, 0x6b,
	0x10, 0x1b, 0x12, 0x0c, 0x0a, 0x08, 0x47, 0x75, 0x6a, 0x61, 0x72, 0x61, 0x74, 0x69, 0x10, 0x1c,
	0x12, 0x12, 0x0a, 0x0e, 0x48, 0x61, 0x69, 0x74, 0x69, 0x61, 0x6e, 0x5f, 0x43, 0x72, 0x65, 0x6f,
	0x6c, 0x65, 0x10, 0x1d, 0x12, 0x09, 0x0a, 0x05, 0x48, 0x61, 0x75, 0x73, 0x61, 0x10, 0x1e, 0x12,
	0x0a, 0x0a, 0x06, 0x48, 0x65, 0x62, 0x72, 0x65, 0x77, 0x10, 0x1f, 0x12, 0x09, 0x0a, 0x05, 0x48,
	0x69, 0x6e, 0x64, 0x69, 0x10, 0x20, 0x12, 0x0d, 0x0a, 0x09, 0x48, 0x75, 0x6e, 0x67, 0x61, 0x72,
	0x69, 0x61, 0x6e, 0x10, 0x21, 0x12, 0x0d, 0x0a, 0x09, 0x49, 0x63, 0x65, 0x6c, 0x61, 0x6e, 0x64,
	0x69, 0x63, 0x10, 0x22, 0x12, 0x0e, 0x0a, 0x0a, 0x49, 0x6e, 0x64, 0x6f, 0x6e, 0x65, 0x73, 0x69,
	0x61, 0x6e, 0x10, 0x23, 0x12, 0x09, 0x0a, 0x05, 0x49, 0x72, 0x69, 0x73, 0x68, 0x10, 0x24, 0x12,
	0x0b, 0x0a, 0x07, 0x49, 0x74, 0x61, 0x6c, 0x69, 0x61, 0x6e, 0x10, 0x25, 0x12, 0x0c, 0x0a, 0x08,
	0x4a, 0x61, 0x70, 0x61, 0x6e, 0x65, 0x73, 0x65, 0x10, 0x26, 0x12, 0x0b, 0x0a, 0x07, 0x4b, 0x61,
	0x6e, 0x6e, 0x61, 0x64, 0x61, 0x10, 0x27, 0x12, 0x0a, 0x0a, 0x06, 0x4b, 0x61, 0x7a, 0x61, 0x6b,
	0x68, 0x10, 0x28, 0x12, 0x0a, 0x0a, 0x06, 0x4b, 0x6f, 0x72, 0x65, 0x61, 0x6e, 0x10, 0x29, 0x12,
	0x0b, 0x0a, 0x07, 0x4c, 0x61, 0x74, 0x76, 0x69, 0x61, 0x6e, 0x10, 0x2a, 0x12, 0x0e, 0x0a, 0x0a,
	0x4c, 0x69, 0x74, 0x68, 0x75, 0x61, 0x6e, 0x69, 0x61, 0x6e, 0x10, 0x2b, 0x12, 0x0e, 0x0a, 0x0a,
	0x4d, 0x61, 0x63, 0x65, 0x64, 0x6f, 0x6e, 0x69, 0x61, 0x6e, 0x10, 0x2c, 0x12, 0x09, 0x0a, 0x05,
	0x4d, 0x61, 0x6c, 0x61, 0x79, 0x10, 0x2d, 0x12, 0x0d, 0x0a, 0x09, 0x4d, 0x61, 0x6c, 0x61, 0x79,
	0x61, 0x6c, 0x61, 0x6d, 0x10, 0x2e, 0x12, 0x0b, 0x0a, 0x07, 0x4d, 0x61, 0x6c, 0x74, 0x65, 0x73,
	0x65, 0x10, 0x2f, 0x12, 0x0b, 0x0a, 0x07, 0x4d, 0x61, 0x72, 0x61, 0x74, 0x68, 0x69, 0x10, 0x30,
	0x12, 0x0d, 0x0a, 0x09, 0x4d, 0x6f, 0x6e, 0x67, 0x6f, 0x6c, 0x69, 0x61, 0x6e, 0x10, 0x31, 0x12,
	0x14, 0x0a, 0x10, 0x4e, 0x6f, 0x72, 0x77, 0x65, 0x67, 0x69, 0x61, 0x6e, 0x5f, 0x42, 0x6f, 0x6b,
	0x6d, 0x61, 0x6c, 0x10, 0x32, 0x12, 0x0a, 0x0a, 0x06, 0x50, 0x61, 0x73, 0x68, 0x74, 0x6f, 0x10,
	0x33, 0x12, 0x0a, 0x0a, 0x06, 0x50, 0x6f, 0x6c, 0x69, 0x73, 0x68, 0x10, 0x34, 0x12, 0x15, 0x0a,
	0x11, 0x50, 0x6f, 0x72, 0x74, 0x75, 0x67, 0x75, 0x65, 0x73, 0x65, 0x5f, 0x42, 0x72, 0x61, 0x7a,
	0x69, 0x6c, 0x10, 0x35, 0x12, 0x17, 0x0a, 0x13, 0x50, 0x6f, 0x72, 0x74, 0x75, 0x67, 0x75, 0x65,
	0x73, 0x65, 0x5f, 0x50, 0x6f, 0x72, 0x74, 0x75, 0x67, 0x61, 0x6c, 0x10, 0x36, 0x12, 0x0b, 0x0a,
	0x07, 0x50, 0x75, 0x6e, 0x6a, 0x61, 0x62, 0x69, 0x10, 0x37, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x6f,
	0x6d, 0x61, 0x6e, 0x69, 0x61, 0x6e, 0x10, 0x38, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x75, 0x73, 0x73,
	0x69, 0x61, 0x6e, 0x10, 0x39, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x65, 0x72, 0x62, 0x69, 0x61, 0x6e,
	0x10, 0x3a, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x69, 0x6e, 0x68, 0x61, 0x6c, 0x61, 0x10, 0x3b, 0x12,
	0x0a, 0x0a, 0x06, 0x53, 0x6c, 0x6f, 0x76, 0x61, 0x6b, 0x10, 0x3c, 0x12, 0x0d, 0x0a, 0x09, 0x53,
	0x6c, 0x6f, 0x76, 0x65, 0x6e, 0x69, 0x61, 0x6e, 0x10, 0x3d, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x6f,
	0x6d, 0x61, 0x6c, 0x69, 0x10, 0x3e, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x70, 0x61, 0x6e, 0x69, 0x73,
	0x68, 0x10, 0x3f, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x70, 0x61, 0x6e, 0x69, 0x73, 0x68, 0x5f, 0x4d,
	0x65, 0x78, 0x69, 0x63, 0x6f, 0x10, 0x40, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x77, 0x61, 0x68, 0x69,
	0x6c, 0x69, 0x10, 0x41, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x77, 0x65, 0x64, 0x69, 0x73, 0x68, 0x10,
	0x42, 0x12, 0x09, 0x0a, 0x05, 0x54, 0x61, 0x6d, 0x69, 0x6c, 0x10, 0x43, 0x12, 0x0a, 0x0a, 0x06,
	0x54, 0x65, 0x6c, 0x75, 0x67, 0x75, 0x10, 0x44, 0x12, 0x08, 0x0a, 0x04, 0x54, 0x68, 0x61, 0x69,
	0x10, 0x45, 0x12, 0x0b, 0x0a, 0x07, 0x54, 0x75, 0x72, 0x6b, 0x69, 0x73, 0x68, 0x10, 0x46, 0x12,
	0x0d, 0x0a, 0x09, 0x55, 0x6b, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x61, 0x6e, 0x10, 0x47, 0x12, 0x08,
	0x0a, 0x04, 0x55, 0x72, 0x64, 0x75, 0x10, 0x48, 0x12, 0x09, 0x0a, 0x05, 0x55, 0x7a, 0x62, 0x65,
	0x6b, 0x10, 0x49, 0x12, 0x0e, 0x0a, 0x0a, 0x56, 0x69, 0x65, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x65, 0x10, 0x4a, 0x12, 0x09, 0x0a, 0x05, 0x57, 0x65, 0x6c, 0x73, 0x68, 0x10, 0x4b, 0x2a, 0x27,
	0x0a, 0x0d, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x0c, 0x0a, 0x08, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x42, 0x55, 0x46, 0x10, 0x00, 0x12, 0x08, 0x0a,
	0x04, 0x4a, 0x53, 0x4f, 0x4e, 0x10, 0x01, 0x2a, 0x81, 0x01, 0x0a, 0x0c, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x55, 0x43, 0x43,
	0x45, 0x53, 0x53, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44,
	0x5f, 0x44, 0x41, 0x54, 0x41, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x55, 0x4e, 0x41, 0x55, 0x54,
	0x48, 0x4f, 0x52, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x46, 0x4f, 0x52,
	0x42, 0x49, 0x44, 0x44, 0x45, 0x4e, 0x10, 0x03, 0x12, 0x12, 0x0a, 0x0e, 0x49, 0x4e, 0x56, 0x41,
	0x4c, 0x49, 0x44, 0x5f, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x10, 0x04, 0x12, 0x0b, 0x0a, 0x07,
	0x54, 0x49, 0x4d, 0x45, 0x4f, 0x55, 0x54, 0x10, 0x05, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x45, 0x52,
	0x56, 0x45, 0x52, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x06, 0x2a, 0x61, 0x0a, 0x12, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x4e, 0x4f, 0x4e, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x54, 0x4f, 0x41, 0x53, 0x54, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x41, 0x4c, 0x45, 0x52, 0x54, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x45, 0x43, 0x4f, 0x4e, 0x44,
	0x5f, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x03, 0x2a, 0xb7,
	0x01, 0x0a, 0x18, 0x57, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x43, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x11, 0x0a, 0x0d, 0x43,
	0x6c, 0x6f, 0x73, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x5a, 0x65, 0x72, 0x6f, 0x10, 0x00, 0x12, 0x22,
	0x0a, 0x1d, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x41, 0x75, 0x74, 0x68, 0x65,
	0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x10,
	0xa1, 0x1f, 0x12, 0x21, 0x0a, 0x1c, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x44,
	0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x10, 0xa2, 0x1f, 0x12, 0x21, 0x0a, 0x1c, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x43, 0x6f,
	0x64, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0xa3, 0x1f, 0x12, 0x1e, 0x0a, 0x19, 0x43, 0x6c, 0x6f, 0x73,
	0x65, 0x43, 0x6f, 0x64, 0x65, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x6f, 0x75, 0x74, 0x10, 0xa4, 0x1f, 0x2a, 0x3b, 0x0a, 0x10, 0x43, 0x6f, 0x6e, 0x76,
	0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0a, 0x0a, 0x06,
	0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x10, 0x02, 0x2a, 0x37, 0x0a, 0x11, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x4e, 0x65,
	0x77, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x10, 0x00,
	0x12, 0x0c, 0x0a, 0x08, 0x4e, 0x65, 0x77, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x10, 0x01, 0x2a, 0x6f,
	0x0a, 0x12, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x54, 0x65, 0x78, 0x74, 0x10, 0x00, 0x12, 0x0c,
	0x0a, 0x08, 0x4d, 0x61, 0x72, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05,
	0x49, 0x6d, 0x61, 0x67, 0x65, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x56, 0x6f, 0x69, 0x63, 0x65,
	0x10, 0x03, 0x12, 0x09, 0x0a, 0x05, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x10, 0x04, 0x12, 0x0a, 0x0a,
	0x06, 0x54, 0x79, 0x70, 0x69, 0x6e, 0x67, 0x10, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x52, 0x65, 0x61,
	0x64, 0x10, 0x66, 0x12, 0x0a, 0x0a, 0x06, 0x52, 0x65, 0x63, 0x61, 0x6c, 0x6c, 0x10, 0x67, 0x42,
	0x06, 0x5a, 0x04, 0x2e, 0x2f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_common_proto_rawDescOnce sync.Once
	file_common_proto_rawDescData = file_common_proto_rawDesc
)

func file_common_proto_rawDescGZIP() []byte {
	file_common_proto_rawDescOnce.Do(func() {
		file_common_proto_rawDescData = protoimpl.X.CompressGZIP(file_common_proto_rawDescData)
	})
	return file_common_proto_rawDescData
}

var file_common_proto_enumTypes = make([]protoimpl.EnumInfo, 11)
var file_common_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_common_proto_goTypes = []interface{}{
	(Platform)(0),                   // 0: pb.Platform
	(I18NLanguage)(0),               // 1: pb.I18nLanguage
	(EncodingProto)(0),              // 2: pb.EncodingProto
	(ResponseCode)(0),               // 3: pb.ResponseCode
	(ResponseActionType)(0),         // 4: pb.ResponseActionType
	(WebsocketCustomCloseCode)(0),   // 5: pb.WebsocketCustomCloseCode
	(ConversationType)(0),           // 6: pb.ConversationType
	(NoticeContentType)(0),          // 7: pb.NoticeContentType
	(MessageContentType)(0),         // 8: pb.MessageContentType
	(ToastActionData_Level)(0),      // 9: pb.ToastActionData.Level
	(AlertActionData_ButtonType)(0), // 10: pb.AlertActionData.ButtonType
	(*RequestHeader)(nil),           // 11: pb.RequestHeader
	(*ToastActionData)(nil),         // 12: pb.ToastActionData
	(*AlertActionData)(nil),         // 13: pb.AlertActionData
	(*ResponseHeader)(nil),          // 14: pb.ResponseHeader
}
var file_common_proto_depIdxs = []int32{
	0,  // 0: pb.RequestHeader.platform:type_name -> pb.Platform
	1,  // 1: pb.RequestHeader.language:type_name -> pb.I18nLanguage
	2,  // 2: pb.RequestHeader.encoding:type_name -> pb.EncodingProto
	9,  // 3: pb.ToastActionData.level:type_name -> pb.ToastActionData.Level
	10, // 4: pb.AlertActionData.buttonType:type_name -> pb.AlertActionData.ButtonType
	3,  // 5: pb.ResponseHeader.code:type_name -> pb.ResponseCode
	4,  // 6: pb.ResponseHeader.actionType:type_name -> pb.ResponseActionType
	7,  // [7:7] is the sub-list for method output_type
	7,  // [7:7] is the sub-list for method input_type
	7,  // [7:7] is the sub-list for extension type_name
	7,  // [7:7] is the sub-list for extension extendee
	0,  // [0:7] is the sub-list for field type_name
}

func init() { file_common_proto_init() }
func file_common_proto_init() {
	if File_common_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_common_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestHeader); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ToastActionData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AlertActionData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseHeader); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_common_proto_rawDesc,
			NumEnums:      11,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_common_proto_goTypes,
		DependencyIndexes: file_common_proto_depIdxs,
		EnumInfos:         file_common_proto_enumTypes,
		MessageInfos:      file_common_proto_msgTypes,
	}.Build()
	File_common_proto = out.File
	file_common_proto_rawDesc = nil
	file_common_proto_goTypes = nil
	file_common_proto_depIdxs = nil
}
