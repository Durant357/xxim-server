// Code generated by goctl. DO NOT EDIT.
// Source: conversation.proto

package subscriptionservice

import (
	"context"

	"github.com/cherish-chat/xxim-server/common/pb"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	ConversationSettingUpdateReq              = pb.ConversationSettingUpdateReq
	ConversationSettingUpdateResp             = pb.ConversationSettingUpdateResp
	CountCreateGroupReq                       = pb.CountCreateGroupReq
	CountCreateGroupResp                      = pb.CountCreateGroupResp
	CountFriendReq                            = pb.CountFriendReq
	CountFriendResp                           = pb.CountFriendResp
	CountJoinGroupReq                         = pb.CountJoinGroupReq
	CountJoinGroupResp                        = pb.CountJoinGroupResp
	FriendApplyHandleReq                      = pb.FriendApplyHandleReq
	FriendApplyHandleResp                     = pb.FriendApplyHandleResp
	FriendApplyReq                            = pb.FriendApplyReq
	FriendApplyResp                           = pb.FriendApplyResp
	GroupCreateReq                            = pb.GroupCreateReq
	GroupCreateResp                           = pb.GroupCreateResp
	GroupSubscribeReq                         = pb.GroupSubscribeReq
	GroupSubscribeResp                        = pb.GroupSubscribeResp
	ListFriendApplyReq                        = pb.ListFriendApplyReq
	ListFriendApplyReq_Filter                 = pb.ListFriendApplyReq_Filter
	ListFriendApplyReq_Option                 = pb.ListFriendApplyReq_Option
	ListFriendApplyResp                       = pb.ListFriendApplyResp
	ListFriendApplyResp_FriendApply           = pb.ListFriendApplyResp_FriendApply
	ListGroupSubscribersReq                   = pb.ListGroupSubscribersReq
	ListGroupSubscribersReq_Filter            = pb.ListGroupSubscribersReq_Filter
	ListGroupSubscribersReq_Option            = pb.ListGroupSubscribersReq_Option
	ListGroupSubscribersResp                  = pb.ListGroupSubscribersResp
	ListGroupSubscribersResp_Subscriber       = pb.ListGroupSubscribersResp_Subscriber
	ListJoinedGroupsReq                       = pb.ListJoinedGroupsReq
	ListJoinedGroupsReq_Filter                = pb.ListJoinedGroupsReq_Filter
	ListJoinedGroupsReq_Filter_SettingKV      = pb.ListJoinedGroupsReq_Filter_SettingKV
	ListJoinedGroupsReq_Option                = pb.ListJoinedGroupsReq_Option
	ListJoinedGroupsResp                      = pb.ListJoinedGroupsResp
	ListJoinedGroupsResp_Group                = pb.ListJoinedGroupsResp_Group
	ListJoinedGroupsResp_Group_SelfMemberInfo = pb.ListJoinedGroupsResp_Group_SelfMemberInfo
	SubscriptionAfterOnlineReq                = pb.SubscriptionAfterOnlineReq
	SubscriptionAfterOnlineResp               = pb.SubscriptionAfterOnlineResp
	SubscriptionSubscribeReq                  = pb.SubscriptionSubscribeReq
	SubscriptionSubscribeResp                 = pb.SubscriptionSubscribeResp

	SubscriptionService interface {
		// SubscriptionSubscribe 订阅号订阅
		SubscriptionSubscribe(ctx context.Context, in *SubscriptionSubscribeReq, opts ...grpc.CallOption) (*SubscriptionSubscribeResp, error)
		// SubscriptionAfterOnline 订阅号在做用户上线后的操作
		SubscriptionAfterOnline(ctx context.Context, in *SubscriptionAfterOnlineReq, opts ...grpc.CallOption) (*SubscriptionAfterOnlineResp, error)
	}

	defaultSubscriptionService struct {
		cli zrpc.Client
	}
)

func NewSubscriptionService(cli zrpc.Client) SubscriptionService {
	return &defaultSubscriptionService{
		cli: cli,
	}
}

// SubscriptionSubscribe 订阅号订阅
func (m *defaultSubscriptionService) SubscriptionSubscribe(ctx context.Context, in *SubscriptionSubscribeReq, opts ...grpc.CallOption) (*SubscriptionSubscribeResp, error) {
	client := pb.NewSubscriptionServiceClient(m.cli.Conn())
	return client.SubscriptionSubscribe(ctx, in, opts...)
}

// SubscriptionAfterOnline 订阅号在做用户上线后的操作
func (m *defaultSubscriptionService) SubscriptionAfterOnline(ctx context.Context, in *SubscriptionAfterOnlineReq, opts ...grpc.CallOption) (*SubscriptionAfterOnlineResp, error) {
	client := pb.NewSubscriptionServiceClient(m.cli.Conn())
	return client.SubscriptionAfterOnline(ctx, in, opts...)
}
