// Code generated by goctl. DO NOT EDIT.
// Source: conversation.proto

package friendservice

import (
	"context"

	"github.com/cherish-chat/xxim-server/common/pb"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	ConversationSettingUpdateReq    = pb.ConversationSettingUpdateReq
	ConversationSettingUpdateResp   = pb.ConversationSettingUpdateResp
	FriendApplyHandleReq            = pb.FriendApplyHandleReq
	FriendApplyHandleResp           = pb.FriendApplyHandleResp
	FriendApplyReq                  = pb.FriendApplyReq
	FriendApplyResp                 = pb.FriendApplyResp
	GroupCreateReq                  = pb.GroupCreateReq
	GroupCreateResp                 = pb.GroupCreateResp
	ListFriendApplyReq              = pb.ListFriendApplyReq
	ListFriendApplyReq_Filter       = pb.ListFriendApplyReq_Filter
	ListFriendApplyReq_Option       = pb.ListFriendApplyReq_Option
	ListFriendApplyResp             = pb.ListFriendApplyResp
	ListFriendApplyResp_FriendApply = pb.ListFriendApplyResp_FriendApply

	FriendService interface {
		// FriendApply 添加好友
		FriendApply(ctx context.Context, in *FriendApplyReq, opts ...grpc.CallOption) (*FriendApplyResp, error)
		// FriendApplyHandle 处理好友申请
		FriendApplyHandle(ctx context.Context, in *FriendApplyHandleReq, opts ...grpc.CallOption) (*FriendApplyHandleResp, error)
		// ListFriendApply 列出好友申请
		ListFriendApply(ctx context.Context, in *ListFriendApplyReq, opts ...grpc.CallOption) (*ListFriendApplyResp, error)
	}

	defaultFriendService struct {
		cli zrpc.Client
	}
)

func NewFriendService(cli zrpc.Client) FriendService {
	return &defaultFriendService{
		cli: cli,
	}
}

// FriendApply 添加好友
func (m *defaultFriendService) FriendApply(ctx context.Context, in *FriendApplyReq, opts ...grpc.CallOption) (*FriendApplyResp, error) {
	client := pb.NewFriendServiceClient(m.cli.Conn())
	return client.FriendApply(ctx, in, opts...)
}

// FriendApplyHandle 处理好友申请
func (m *defaultFriendService) FriendApplyHandle(ctx context.Context, in *FriendApplyHandleReq, opts ...grpc.CallOption) (*FriendApplyHandleResp, error) {
	client := pb.NewFriendServiceClient(m.cli.Conn())
	return client.FriendApplyHandle(ctx, in, opts...)
}

// ListFriendApply 列出好友申请
func (m *defaultFriendService) ListFriendApply(ctx context.Context, in *ListFriendApplyReq, opts ...grpc.CallOption) (*ListFriendApplyResp, error) {
	client := pb.NewFriendServiceClient(m.cli.Conn())
	return client.ListFriendApply(ctx, in, opts...)
}
