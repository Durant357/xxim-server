// Code generated by goctl. DO NOT EDIT.
// Source: conversation.proto

package groupservice

import (
	"context"

	"github.com/cherish-chat/xxim-server/common/pb"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	ConversationSettingUpdateReq    = pb.ConversationSettingUpdateReq
	ConversationSettingUpdateResp   = pb.ConversationSettingUpdateResp
	CountCreateGroupReq             = pb.CountCreateGroupReq
	CountCreateGroupResp            = pb.CountCreateGroupResp
	CountFriendReq                  = pb.CountFriendReq
	CountFriendResp                 = pb.CountFriendResp
	CountJoinGroupReq               = pb.CountJoinGroupReq
	CountJoinGroupResp              = pb.CountJoinGroupResp
	FriendApplyHandleReq            = pb.FriendApplyHandleReq
	FriendApplyHandleResp           = pb.FriendApplyHandleResp
	FriendApplyReq                  = pb.FriendApplyReq
	FriendApplyResp                 = pb.FriendApplyResp
	GroupCreateReq                  = pb.GroupCreateReq
	GroupCreateResp                 = pb.GroupCreateResp
	ListFriendApplyReq              = pb.ListFriendApplyReq
	ListFriendApplyReq_Filter       = pb.ListFriendApplyReq_Filter
	ListFriendApplyReq_Option       = pb.ListFriendApplyReq_Option
	ListFriendApplyResp             = pb.ListFriendApplyResp
	ListFriendApplyResp_FriendApply = pb.ListFriendApplyResp_FriendApply

	GroupService interface {
		// GroupCreate 创建群组
		GroupCreate(ctx context.Context, in *GroupCreateReq, opts ...grpc.CallOption) (*GroupCreateResp, error)
		// CountJoinGroup 统计加入的群组数量
		CountJoinGroup(ctx context.Context, in *CountJoinGroupReq, opts ...grpc.CallOption) (*CountJoinGroupResp, error)
		// CountCreateGroup 统计创建的群组数量
		CountCreateGroup(ctx context.Context, in *CountCreateGroupReq, opts ...grpc.CallOption) (*CountCreateGroupResp, error)
	}

	defaultGroupService struct {
		cli zrpc.Client
	}
)

func NewGroupService(cli zrpc.Client) GroupService {
	return &defaultGroupService{
		cli: cli,
	}
}

// GroupCreate 创建群组
func (m *defaultGroupService) GroupCreate(ctx context.Context, in *GroupCreateReq, opts ...grpc.CallOption) (*GroupCreateResp, error) {
	client := pb.NewGroupServiceClient(m.cli.Conn())
	return client.GroupCreate(ctx, in, opts...)
}

// CountJoinGroup 统计加入的群组数量
func (m *defaultGroupService) CountJoinGroup(ctx context.Context, in *CountJoinGroupReq, opts ...grpc.CallOption) (*CountJoinGroupResp, error) {
	client := pb.NewGroupServiceClient(m.cli.Conn())
	return client.CountJoinGroup(ctx, in, opts...)
}

// CountCreateGroup 统计创建的群组数量
func (m *defaultGroupService) CountCreateGroup(ctx context.Context, in *CountCreateGroupReq, opts ...grpc.CallOption) (*CountCreateGroupResp, error) {
	client := pb.NewGroupServiceClient(m.cli.Conn())
	return client.CountCreateGroup(ctx, in, opts...)
}
