// Code generated by goctl. DO NOT EDIT!
// Source: conversation.proto

package conversationservice

import (
	"context"

	"github.com/cherish-chat/xxim-server/common/pb"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	GroupCreateReq  = pb.GroupCreateReq
	GroupCreateResp = pb.GroupCreateResp

	ConversationService interface {
		// GroupCreate 创建群组
		GroupCreate(ctx context.Context, in *GroupCreateReq, opts ...grpc.CallOption) (*GroupCreateResp, error)
	}

	defaultConversationService struct {
		cli zrpc.Client
	}
)

func NewConversationService(cli zrpc.Client) ConversationService {
	return &defaultConversationService{
		cli: cli,
	}
}

// GroupCreate 创建群组
func (m *defaultConversationService) GroupCreate(ctx context.Context, in *GroupCreateReq, opts ...grpc.CallOption) (*GroupCreateResp, error) {
	client := pb.NewConversationServiceClient(m.cli.Conn())
	return client.GroupCreate(ctx, in, opts...)
}
