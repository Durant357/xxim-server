// Code generated by goctl. DO NOT EDIT.
// Source: message.proto

package server

import (
	"context"

	"github.com/cherish-chat/xxim-server/app/message/internal/logic/noticeservice"
	"github.com/cherish-chat/xxim-server/app/message/internal/svc"
	"github.com/cherish-chat/xxim-server/common/pb"
)

type NoticeServiceServer struct {
	svcCtx *svc.ServiceContext
	pb.UnimplementedNoticeServiceServer
}

func NewNoticeServiceServer(svcCtx *svc.ServiceContext) *NoticeServiceServer {
	return &NoticeServiceServer{
		svcCtx: svcCtx,
	}
}

// NoticeSend 通知发送
func (s *NoticeServiceServer) NoticeSend(ctx context.Context, in *pb.NoticeSendReq) (*pb.NoticeSendResp, error) {
	l := noticeservicelogic.NewNoticeSendLogic(ctx, s.svcCtx)
	return l.NoticeSend(in)
}

// NoticeBatchSend 通知批量发送
func (s *NoticeServiceServer) NoticeBatchSend(ctx context.Context, in *pb.NoticeBatchSendReq) (*pb.NoticeBatchSendResp, error) {
	l := noticeservicelogic.NewNoticeBatchSendLogic(ctx, s.svcCtx)
	return l.NoticeBatchSend(in)
}

// ListNotice 获取通知列表
func (s *NoticeServiceServer) ListNotice(ctx context.Context, in *pb.ListNoticeReq) (*pb.ListNoticeResp, error) {
	l := noticeservicelogic.NewListNoticeLogic(ctx, s.svcCtx)
	return l.ListNotice(in)
}
