// Code generated by goctl. DO NOT EDIT!
// Source: user.proto

package server

import (
	"context"

	"github.com/cherish-chat/xxim-server/app/user/internal/logic"
	"github.com/cherish-chat/xxim-server/app/user/internal/svc"
	"github.com/cherish-chat/xxim-server/common/pb"
)

type UserServiceServer struct {
	svcCtx *svc.ServiceContext
	pb.UnimplementedUserServiceServer
}

func NewUserServiceServer(svcCtx *svc.ServiceContext) *UserServiceServer {
	return &UserServiceServer{
		svcCtx: svcCtx,
	}
}

// UserRegister 用户注册
func (s *UserServiceServer) UserRegister(ctx context.Context, in *pb.UserRegisterReq) (*pb.UserRegisterResp, error) {
	l := logic.NewUserRegisterLogic(ctx, s.svcCtx)
	return l.UserRegister(in)
}

// UserDestroy 用户注销
func (s *UserServiceServer) UserDestroy(ctx context.Context, in *pb.UserDestroyReq) (*pb.UserDestroyResp, error) {
	l := logic.NewUserDestroyLogic(ctx, s.svcCtx)
	return l.UserDestroy(in)
}

// UserAccessToken 用户登录
func (s *UserServiceServer) UserAccessToken(ctx context.Context, in *pb.UserAccessTokenReq) (*pb.UserAccessTokenResp, error) {
	l := logic.NewUserAccessTokenLogic(ctx, s.svcCtx)
	return l.UserAccessToken(in)
}

// RefreshUserAccessToken 刷新用户token
func (s *UserServiceServer) RefreshUserAccessToken(ctx context.Context, in *pb.RefreshUserAccessTokenReq) (*pb.RefreshUserAccessTokenResp, error) {
	l := logic.NewRefreshUserAccessTokenLogic(ctx, s.svcCtx)
	return l.RefreshUserAccessToken(in)
}

// RevokeUserAccessToken 注销用户token
func (s *UserServiceServer) RevokeUserAccessToken(ctx context.Context, in *pb.RevokeUserAccessTokenReq) (*pb.RevokeUserAccessTokenResp, error) {
	l := logic.NewRevokeUserAccessTokenLogic(ctx, s.svcCtx)
	return l.RevokeUserAccessToken(in)
}

// UpdateUserAccountMap 更新用户账号信息
func (s *UserServiceServer) UpdateUserAccountMap(ctx context.Context, in *pb.UpdateUserAccountMapReq) (*pb.UpdateUserAccountMapResp, error) {
	l := logic.NewUpdateUserAccountMapLogic(ctx, s.svcCtx)
	return l.UpdateUserAccountMap(in)
}

// UpdateUserProfileMap 更新用户个人信息
func (s *UserServiceServer) UpdateUserProfileMap(ctx context.Context, in *pb.UpdateUserProfileMapReq) (*pb.UpdateUserProfileMapResp, error) {
	l := logic.NewUpdateUserProfileMapLogic(ctx, s.svcCtx)
	return l.UpdateUserProfileMap(in)
}

// UpdateUserExtraMap 更新用户扩展信息
func (s *UserServiceServer) UpdateUserExtraMap(ctx context.Context, in *pb.UpdateUserExtraMapReq) (*pb.UpdateUserExtraMapResp, error) {
	l := logic.NewUpdateUserExtraMapLogic(ctx, s.svcCtx)
	return l.UpdateUserExtraMap(in)
}

// GetSelfUserInfo 获取自己的用户信息
func (s *UserServiceServer) GetSelfUserInfo(ctx context.Context, in *pb.GetSelfUserInfoReq) (*pb.GetSelfUserInfoResp, error) {
	l := logic.NewGetSelfUserInfoLogic(ctx, s.svcCtx)
	return l.GetSelfUserInfo(in)
}

// GetUserInfo 获取用户信息
func (s *UserServiceServer) GetUserInfo(ctx context.Context, in *pb.GetUserInfoReq) (*pb.GetUserInfoResp, error) {
	l := logic.NewGetUserInfoLogic(ctx, s.svcCtx)
	return l.GetUserInfo(in)
}

// ResetUserAccountMap 重置用户账号信息
func (s *UserServiceServer) ResetUserAccountMap(ctx context.Context, in *pb.ResetUserAccountMapReq) (*pb.ResetUserAccountMapResp, error) {
	l := logic.NewResetUserAccountMapLogic(ctx, s.svcCtx)
	return l.ResetUserAccountMap(in)
}

// UserOnlineCallback 用户上线回调
func (s *UserServiceServer) UserOnlineCallback(ctx context.Context, in *pb.UserOnlineCallbackReq) (*pb.UserOnlineCallbackResp, error) {
	l := logic.NewUserOnlineCallbackLogic(ctx, s.svcCtx)
	return l.UserOnlineCallback(in)
}

// UserOfflineCallback 用户下线回调
func (s *UserServiceServer) UserOfflineCallback(ctx context.Context, in *pb.UserOfflineCallbackReq) (*pb.UserOfflineCallbackResp, error) {
	l := logic.NewUserOfflineCallbackLogic(ctx, s.svcCtx)
	return l.UserOfflineCallback(in)
}

// UserBeforeConnect 用户连接前的回调
func (s *UserServiceServer) UserBeforeConnect(ctx context.Context, in *pb.UserBeforeConnectReq) (*pb.UserBeforeConnectResp, error) {
	l := logic.NewUserBeforeConnectLogic(ctx, s.svcCtx)
	return l.UserBeforeConnect(in)
}

// UserBeforeRequest 用户请求前的回调
func (s *UserServiceServer) UserBeforeRequest(ctx context.Context, in *pb.UserBeforeRequestReq) (*pb.UserBeforeRequestResp, error) {
	l := logic.NewUserBeforeRequestLogic(ctx, s.svcCtx)
	return l.UserBeforeRequest(in)
}

// CreateRobot 创建机器人
func (s *UserServiceServer) CreateRobot(ctx context.Context, in *pb.CreateRobotReq) (*pb.CreateRobotResp, error) {
	l := logic.NewCreateRobotLogic(ctx, s.svcCtx)
	return l.CreateRobot(in)
}
