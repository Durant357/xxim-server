// Code generated by goctl. DO NOT EDIT!
// Source: user.proto

package userservice

import (
	"context"

	"github.com/cherish-chat/xxim-server/common/pb"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	CreateRobotReq             = pb.CreateRobotReq
	CreateRobotResp            = pb.CreateRobotResp
	GetSelfUserInfoReq         = pb.GetSelfUserInfoReq
	GetSelfUserInfoResp        = pb.GetSelfUserInfoResp
	GetUserInfoReq             = pb.GetUserInfoReq
	GetUserInfoResp            = pb.GetUserInfoResp
	RefreshUserAccessTokenReq  = pb.RefreshUserAccessTokenReq
	RefreshUserAccessTokenResp = pb.RefreshUserAccessTokenResp
	ResetUserAccountMapReq     = pb.ResetUserAccountMapReq
	ResetUserAccountMapResp    = pb.ResetUserAccountMapResp
	RevokeUserAccessTokenReq   = pb.RevokeUserAccessTokenReq
	RevokeUserAccessTokenResp  = pb.RevokeUserAccessTokenResp
	UpdateUserAccountMapReq    = pb.UpdateUserAccountMapReq
	UpdateUserAccountMapResp   = pb.UpdateUserAccountMapResp
	UpdateUserExtraMapReq      = pb.UpdateUserExtraMapReq
	UpdateUserExtraMapResp     = pb.UpdateUserExtraMapResp
	UpdateUserProfileMapReq    = pb.UpdateUserProfileMapReq
	UpdateUserProfileMapResp   = pb.UpdateUserProfileMapResp
	UserAccessTokenReq         = pb.UserAccessTokenReq
	UserAccessTokenResp        = pb.UserAccessTokenResp
	UserBeforeConnectReq       = pb.UserBeforeConnectReq
	UserBeforeConnectResp      = pb.UserBeforeConnectResp
	UserBeforeRequestReq       = pb.UserBeforeRequestReq
	UserBeforeRequestResp      = pb.UserBeforeRequestResp
	UserDestroyReq             = pb.UserDestroyReq
	UserDestroyResp            = pb.UserDestroyResp
	UserOfflineCallbackReq     = pb.UserOfflineCallbackReq
	UserOfflineCallbackResp    = pb.UserOfflineCallbackResp
	UserOnlineCallbackReq      = pb.UserOnlineCallbackReq
	UserOnlineCallbackResp     = pb.UserOnlineCallbackResp
	UserRegisterReq            = pb.UserRegisterReq
	UserRegisterResp           = pb.UserRegisterResp

	UserService interface {
		// UserRegister 用户注册
		UserRegister(ctx context.Context, in *UserRegisterReq, opts ...grpc.CallOption) (*UserRegisterResp, error)
		// UserDestroy 用户注销
		UserDestroy(ctx context.Context, in *UserDestroyReq, opts ...grpc.CallOption) (*UserDestroyResp, error)
		// UserAccessToken 用户登录
		UserAccessToken(ctx context.Context, in *UserAccessTokenReq, opts ...grpc.CallOption) (*UserAccessTokenResp, error)
		// RefreshUserAccessToken 刷新用户token
		RefreshUserAccessToken(ctx context.Context, in *RefreshUserAccessTokenReq, opts ...grpc.CallOption) (*RefreshUserAccessTokenResp, error)
		// RevokeUserAccessToken 注销用户token
		RevokeUserAccessToken(ctx context.Context, in *RevokeUserAccessTokenReq, opts ...grpc.CallOption) (*RevokeUserAccessTokenResp, error)
		// UpdateUserAccountMap 更新用户账号信息
		UpdateUserAccountMap(ctx context.Context, in *UpdateUserAccountMapReq, opts ...grpc.CallOption) (*UpdateUserAccountMapResp, error)
		// UpdateUserProfileMap 更新用户个人信息
		UpdateUserProfileMap(ctx context.Context, in *UpdateUserProfileMapReq, opts ...grpc.CallOption) (*UpdateUserProfileMapResp, error)
		// UpdateUserExtraMap 更新用户扩展信息
		UpdateUserExtraMap(ctx context.Context, in *UpdateUserExtraMapReq, opts ...grpc.CallOption) (*UpdateUserExtraMapResp, error)
		// GetSelfUserInfo 获取自己的用户信息
		GetSelfUserInfo(ctx context.Context, in *GetSelfUserInfoReq, opts ...grpc.CallOption) (*GetSelfUserInfoResp, error)
		// GetUserInfo 获取用户信息
		GetUserInfo(ctx context.Context, in *GetUserInfoReq, opts ...grpc.CallOption) (*GetUserInfoResp, error)
		// ResetUserAccountMap 重置用户账号信息
		ResetUserAccountMap(ctx context.Context, in *ResetUserAccountMapReq, opts ...grpc.CallOption) (*ResetUserAccountMapResp, error)
		// UserOnlineCallback 用户上线回调
		UserOnlineCallback(ctx context.Context, in *UserOnlineCallbackReq, opts ...grpc.CallOption) (*UserOnlineCallbackResp, error)
		// UserOfflineCallback 用户下线回调
		UserOfflineCallback(ctx context.Context, in *UserOfflineCallbackReq, opts ...grpc.CallOption) (*UserOfflineCallbackResp, error)
		// UserBeforeConnect 用户连接前的回调
		UserBeforeConnect(ctx context.Context, in *UserBeforeConnectReq, opts ...grpc.CallOption) (*UserBeforeConnectResp, error)
		// UserBeforeRequest 用户请求前的回调
		UserBeforeRequest(ctx context.Context, in *UserBeforeRequestReq, opts ...grpc.CallOption) (*UserBeforeRequestResp, error)
		// CreateRobot 创建机器人
		CreateRobot(ctx context.Context, in *CreateRobotReq, opts ...grpc.CallOption) (*CreateRobotResp, error)
	}

	defaultUserService struct {
		cli zrpc.Client
	}
)

func NewUserService(cli zrpc.Client) UserService {
	return &defaultUserService{
		cli: cli,
	}
}

// UserRegister 用户注册
func (m *defaultUserService) UserRegister(ctx context.Context, in *UserRegisterReq, opts ...grpc.CallOption) (*UserRegisterResp, error) {
	client := pb.NewUserServiceClient(m.cli.Conn())
	return client.UserRegister(ctx, in, opts...)
}

// UserDestroy 用户注销
func (m *defaultUserService) UserDestroy(ctx context.Context, in *UserDestroyReq, opts ...grpc.CallOption) (*UserDestroyResp, error) {
	client := pb.NewUserServiceClient(m.cli.Conn())
	return client.UserDestroy(ctx, in, opts...)
}

// UserAccessToken 用户登录
func (m *defaultUserService) UserAccessToken(ctx context.Context, in *UserAccessTokenReq, opts ...grpc.CallOption) (*UserAccessTokenResp, error) {
	client := pb.NewUserServiceClient(m.cli.Conn())
	return client.UserAccessToken(ctx, in, opts...)
}

// RefreshUserAccessToken 刷新用户token
func (m *defaultUserService) RefreshUserAccessToken(ctx context.Context, in *RefreshUserAccessTokenReq, opts ...grpc.CallOption) (*RefreshUserAccessTokenResp, error) {
	client := pb.NewUserServiceClient(m.cli.Conn())
	return client.RefreshUserAccessToken(ctx, in, opts...)
}

// RevokeUserAccessToken 注销用户token
func (m *defaultUserService) RevokeUserAccessToken(ctx context.Context, in *RevokeUserAccessTokenReq, opts ...grpc.CallOption) (*RevokeUserAccessTokenResp, error) {
	client := pb.NewUserServiceClient(m.cli.Conn())
	return client.RevokeUserAccessToken(ctx, in, opts...)
}

// UpdateUserAccountMap 更新用户账号信息
func (m *defaultUserService) UpdateUserAccountMap(ctx context.Context, in *UpdateUserAccountMapReq, opts ...grpc.CallOption) (*UpdateUserAccountMapResp, error) {
	client := pb.NewUserServiceClient(m.cli.Conn())
	return client.UpdateUserAccountMap(ctx, in, opts...)
}

// UpdateUserProfileMap 更新用户个人信息
func (m *defaultUserService) UpdateUserProfileMap(ctx context.Context, in *UpdateUserProfileMapReq, opts ...grpc.CallOption) (*UpdateUserProfileMapResp, error) {
	client := pb.NewUserServiceClient(m.cli.Conn())
	return client.UpdateUserProfileMap(ctx, in, opts...)
}

// UpdateUserExtraMap 更新用户扩展信息
func (m *defaultUserService) UpdateUserExtraMap(ctx context.Context, in *UpdateUserExtraMapReq, opts ...grpc.CallOption) (*UpdateUserExtraMapResp, error) {
	client := pb.NewUserServiceClient(m.cli.Conn())
	return client.UpdateUserExtraMap(ctx, in, opts...)
}

// GetSelfUserInfo 获取自己的用户信息
func (m *defaultUserService) GetSelfUserInfo(ctx context.Context, in *GetSelfUserInfoReq, opts ...grpc.CallOption) (*GetSelfUserInfoResp, error) {
	client := pb.NewUserServiceClient(m.cli.Conn())
	return client.GetSelfUserInfo(ctx, in, opts...)
}

// GetUserInfo 获取用户信息
func (m *defaultUserService) GetUserInfo(ctx context.Context, in *GetUserInfoReq, opts ...grpc.CallOption) (*GetUserInfoResp, error) {
	client := pb.NewUserServiceClient(m.cli.Conn())
	return client.GetUserInfo(ctx, in, opts...)
}

// ResetUserAccountMap 重置用户账号信息
func (m *defaultUserService) ResetUserAccountMap(ctx context.Context, in *ResetUserAccountMapReq, opts ...grpc.CallOption) (*ResetUserAccountMapResp, error) {
	client := pb.NewUserServiceClient(m.cli.Conn())
	return client.ResetUserAccountMap(ctx, in, opts...)
}

// UserOnlineCallback 用户上线回调
func (m *defaultUserService) UserOnlineCallback(ctx context.Context, in *UserOnlineCallbackReq, opts ...grpc.CallOption) (*UserOnlineCallbackResp, error) {
	client := pb.NewUserServiceClient(m.cli.Conn())
	return client.UserOnlineCallback(ctx, in, opts...)
}

// UserOfflineCallback 用户下线回调
func (m *defaultUserService) UserOfflineCallback(ctx context.Context, in *UserOfflineCallbackReq, opts ...grpc.CallOption) (*UserOfflineCallbackResp, error) {
	client := pb.NewUserServiceClient(m.cli.Conn())
	return client.UserOfflineCallback(ctx, in, opts...)
}

// UserBeforeConnect 用户连接前的回调
func (m *defaultUserService) UserBeforeConnect(ctx context.Context, in *UserBeforeConnectReq, opts ...grpc.CallOption) (*UserBeforeConnectResp, error) {
	client := pb.NewUserServiceClient(m.cli.Conn())
	return client.UserBeforeConnect(ctx, in, opts...)
}

// UserBeforeRequest 用户请求前的回调
func (m *defaultUserService) UserBeforeRequest(ctx context.Context, in *UserBeforeRequestReq, opts ...grpc.CallOption) (*UserBeforeRequestResp, error) {
	client := pb.NewUserServiceClient(m.cli.Conn())
	return client.UserBeforeRequest(ctx, in, opts...)
}

// CreateRobot 创建机器人
func (m *defaultUserService) CreateRobot(ctx context.Context, in *CreateRobotReq, opts ...grpc.CallOption) (*CreateRobotResp, error) {
	client := pb.NewUserServiceClient(m.cli.Conn())
	return client.CreateRobot(ctx, in, opts...)
}
